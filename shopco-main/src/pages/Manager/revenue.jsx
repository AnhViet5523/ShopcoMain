import { useState, useEffect, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaFilter, FaFileExport, FaPlus } from 'react-icons/fa';
import { Box, Typography, Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Select, MenuItem, FormControl } from '@mui/material';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import axiosClient from '../../apis/axiosClient';
import adminService from '../../apis/adminService';
import './Manager.css';

// ƒêƒÉng k√Ω c√°c th√†nh ph·∫ßn chart
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

// L·∫•y API URL t·ª´ environment
const API_URL = import.meta.env.VITE_API_URL || 'https://localhost:7175';
console.log('API URL s·ª≠ d·ª•ng trong trang Revenue:', API_URL);

const Revenue = () => {
  const [activeItem, setActiveItem] = useState('revenue');
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [monthDisplay, setMonthDisplay] = useState(12); // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã 12 th√°ng
  const [totalRevenue, setTotalRevenue] = useState(0);
  const [averageMonthlyRevenue, setAverageMonthlyRevenue] = useState(0);
  const [totalCustomers, setTotalCustomers] = useState(0);
  const [totalOrders, setTotalOrders] = useState(0);
  const [monthlyData, setMonthlyData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  const sidebarItems = [
    { id: 'revenue', name: 'Doanh thu', icon: 'üìä' },
    { id: 'staff', name: 'Nh√¢n vi√™n', icon: 'üë§' },
    { id: 'viewOrder', name: 'ƒê∆°n h√†ng', icon: 'üìã' },
    { id: 'product', name: 'S·∫£n ph·∫©m', icon: 'üì¶' },
    { id: 'viewCustomer', name: 'H·ªì s∆° kh√°ch h√†ng', icon: 'üìù' },
    { id: 'viewSupport', name: 'ƒê∆°n h·ªó tr·ª£', icon: 'üì´' },
    { id: 'voucher', name: 'Vouchers', icon: 'üé´' },
    { id: 'feedback', name: 'Feedback', icon: 'üì¢' },
    { id: 'blogManager', name: 'Blog', icon: 'üì∞' }
  ];

  useEffect(() => {
    fetchRevenueData();
  }, [selectedYear, monthDisplay]);

  const fetchRevenueData = async () => {
    setIsLoading(true);
    try {
      // G·ªçi API l·∫•y t·ªïng doanh thu
      console.log('ƒêang g·ªçi API t·ªïng doanh thu...');
      console.log('API URL t·ªïng doanh thu:', `${API_URL}/api/Admin/revenue/total`);
      try {
        const totalRevenue = await adminService.getTotalRevenue();
        console.log('D·ªØ li·ªáu t·ªïng doanh thu:', totalRevenue);
        setTotalRevenue(totalRevenue || 0);
      } catch (revenueError) {
        console.error('L·ªói khi l·∫•y t·ªïng doanh thu:', revenueError);
        setTotalRevenue(0);
      }

      // G·ªçi API l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
      console.log('ƒêang g·ªçi API l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng...');
      console.log('API URL t·∫•t c·∫£ ƒë∆°n h√†ng:', `${API_URL}/api/Admin/all`);
      try {
        const orders = await adminService.getAllOrders();
        console.log('D·ªØ li·ªáu ƒë∆°n h√†ng nh·∫≠n ƒë∆∞·ª£c:', orders);
        
        // ƒê·∫£m b·∫£o orders l√† m·ªôt m·∫£ng tr∆∞·ªõc khi filter
        const ordersArray = Array.isArray(orders) ? orders : [];
        console.log('ƒê·ªô d√†i m·∫£ng orders:', ordersArray.length);
        
        // L·ªçc ƒë∆°n h√†ng trong nƒÉm ƒë∆∞·ª£c ch·ªçn
        const ordersInSelectedYear = ordersArray.filter(order => {
          if (!order || !order.orderDate) return false;
          const orderDate = new Date(order.orderDate);
          return orderDate.getFullYear() === selectedYear;
        });
        console.log(`S·ªë ƒë∆°n h√†ng trong nƒÉm ${selectedYear}:`, ordersInSelectedYear.length);
        
        // ƒê·∫øm t·ªïng s·ªë ƒë∆°n h√†ng ho√†n th√†nh
        const completedOrders = ordersInSelectedYear.filter(order => 
          order.orderStatus === "Completed"
        );
        console.log('S·ªë ƒë∆°n h√†ng ho√†n th√†nh:', completedOrders.length);
        setTotalOrders(completedOrders.length);
        
        // T√≠nh t·ªïng s·ªë kh√°ch h√†ng duy nh·∫•t
        const uniqueCustomers = [...new Set(ordersInSelectedYear.map(order => order.userId))];
        console.log('S·ªë kh√°ch h√†ng duy nh·∫•t:', uniqueCustomers.length);
        setTotalCustomers(uniqueCustomers.length);
        
        // T·∫°o d·ªØ li·ªáu theo th√°ng
        const monthlyDataTemp = [];
        let totalRevenueInYear = 0;
        
        // ƒê·∫øm s·ªë th√°ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø
        let monthsWithData = 0;
        
        for (let month = 1; month <= 12; month++) {
          try {
            // G·ªçi API l·∫•y doanh thu theo th√°ng
            console.log(`ƒêang g·ªçi API doanh thu th√°ng ${month}/${selectedYear}...`);
            console.log('API URL doanh thu theo th√°ng:', `${API_URL}/api/Admin/revenue/monthly?year=${selectedYear}&month=${month}`);
            const monthlyRevenue = await adminService.getMonthlyRevenue(selectedYear, month);
            console.log(`Doanh thu th√°ng ${month}/${selectedYear}:`, monthlyRevenue);
            
            // Ch·ªâ c·ªông v√†o t·ªïng v√† ƒë·∫øm s·ªë th√°ng n·∫øu c√≥ doanh thu th·ª±c t·∫ø
            if (monthlyRevenue > 0) {
              totalRevenueInYear += monthlyRevenue;
              monthsWithData++;
            }
            
            // L·ªçc s·ªë ƒë∆°n h√†ng v√† kh√°ch h√†ng trong th√°ng
            const ordersInMonth = ordersInSelectedYear.filter(order => {
              if (!order || !order.orderDate) return false;
              const orderDate = new Date(order.orderDate);
              return orderDate.getMonth() + 1 === month;
            });
            
            const customersInMonth = [...new Set(ordersInMonth.map(order => order.userId))].length;
            
            monthlyDataTemp.push({
              month: month,
              monthName: `Th√°ng ${month}`,
              revenue: monthlyRevenue || 0,
              orders: ordersInMonth.length,
              customers: customersInMonth,
              averagePerCustomer: customersInMonth > 0 ? Math.round((monthlyRevenue || 0) / customersInMonth) : 0
            });
          } catch (monthError) {
            console.error(`L·ªói khi l·∫•y d·ªØ li·ªáu th√°ng ${month}:`, monthError);
            monthlyDataTemp.push({
              month: month,
              monthName: `Th√°ng ${month}`,
              revenue: 0,
              orders: 0,
              customers: 0,
              averagePerCustomer: 0
            });
          }
        }
        
        console.log('D·ªØ li·ªáu h√†ng th√°ng ƒë√£ t·∫°o:', monthlyDataTemp);
        setMonthlyData(monthlyDataTemp);
        
        // T√≠nh doanh thu trung b√¨nh theo th√°ng (ch·ªâ t√≠nh c√°c th√°ng c√≥ d·ªØ li·ªáu)
        if (monthsWithData > 0) {
          setAverageMonthlyRevenue(Math.round(totalRevenueInYear / monthsWithData));
        } else {
          setAverageMonthlyRevenue(0);
        }
      } catch (ordersError) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng:', ordersError);
        // T·∫°o d·ªØ li·ªáu tr·ªëng n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c ƒë∆°n h√†ng
        const emptyMonthlyData = Array.from({length: 12}, (_, i) => ({
          month: i + 1,
          monthName: `Th√°ng ${i + 1}`,
          revenue: 0,
          orders: 0,
          customers: 0,
          averagePerCustomer: 0
        }));
        setMonthlyData(emptyMonthlyData);
        setTotalOrders(0);
        setTotalCustomers(0);
        setAverageMonthlyRevenue(0);
      }
      
      setIsLoading(false);
    } catch (error) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu doanh thu:', error);
      setIsLoading(false);
      // Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
      setTotalRevenue(0);
      setTotalOrders(0);
      setTotalCustomers(0);
      setAverageMonthlyRevenue(0);
      setMonthlyData(Array.from({length: 12}, (_, i) => ({
        month: i + 1,
        monthName: `Th√°ng ${i + 1}`,
        revenue: 0,
        orders: 0,
        customers: 0,
        averagePerCustomer: 0
      })));
    }
  };

  const handleYearChange = (event) => {
    setSelectedYear(event.target.value);
  };

  const handleMonthDisplayChange = (event) => {
    setMonthDisplay(Number(event.target.value));
  };

  // L·ªçc d·ªØ li·ªáu theo s·ªë th√°ng ƒë∆∞·ª£c ch·ªçn
  const filteredMonthlyData = useMemo(() => {
    // ƒê·∫£m b·∫£o monthlyData l√† m·∫£ng tr∆∞·ªõc khi x·ª≠ l√Ω
    if (!Array.isArray(monthlyData) || monthlyData.length === 0) {
      return [];
    }
    
    // N·∫øu hi·ªÉn th·ªã t·∫•t c·∫£ 12 th√°ng
    if (monthDisplay === 12) {
      return monthlyData;
    }
    
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1; // L·∫•y th√°ng hi·ªán t·∫°i (1-12)
    const currentYear = currentDate.getFullYear();
    
    // ƒê·ªëi v·ªõi nƒÉm hi·ªán t·∫°i
    if (selectedYear === currentYear) {
      // Hi·ªÉn th·ªã c√°c th√°ng g·∫ßn ƒë√¢y nh·∫•t
      return monthlyData
        .filter(item => {
          // Ch·ªâ hi·ªÉn th·ªã c√°c th√°ng ƒë√£ qua trong nƒÉm hi·ªán t·∫°i
          return item.month <= currentMonth && item.month > currentMonth - monthDisplay;
        })
        .sort((a, b) => a.month - b.month);
    } 
    // ƒê·ªëi v·ªõi nƒÉm trong qu√° kh·ª©
    else if (selectedYear < currentYear) {
      // Hi·ªÉn th·ªã th√°ng cu·ªëi nƒÉm n·∫øu ch·ªçn hi·ªÉn th·ªã 3 ho·∫∑c 6 th√°ng
      if (monthDisplay === 3) {
        return monthlyData.slice(-3); // 3 th√°ng cu·ªëi nƒÉm
      } else if (monthDisplay === 6) {
        return monthlyData.slice(-6); // 6 th√°ng cu·ªëi nƒÉm
      }
      return monthlyData;
    } 
    // ƒê·ªëi v·ªõi nƒÉm trong t∆∞∆°ng lai
    else {
      // Hi·ªÉn th·ªã c√°c th√°ng ƒë·∫ßu nƒÉm n·∫øu l√† nƒÉm t∆∞∆°ng lai
      if (monthDisplay === 3) {
        return monthlyData.slice(0, 3); // 3 th√°ng ƒë·∫ßu nƒÉm
      } else if (monthDisplay === 6) {
        return monthlyData.slice(0, 6); // 6 th√°ng ƒë·∫ßu nƒÉm
      }
      return monthlyData;
    }
  }, [monthlyData, monthDisplay, selectedYear]);

  // D·ªØ li·ªáu cho bi·ªÉu ƒë·ªì - s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ l·ªçc
  const chartData = {
    labels: filteredMonthlyData.map(item => item.monthName),
    datasets: [
      {
        label: 'Doanh Thu',
        data: filteredMonthlyData.map(item => item.revenue / 1000000), // ƒê∆°n v·ªã tri·ªáu ƒë·ªìng
        borderColor: '#059669',
        backgroundColor: 'rgba(5, 150, 105, 0.1)',
        borderWidth: 2,
        pointBackgroundColor: '#059669',
        tension: 0.4,
      },
    ],
  };

  // C·∫•u h√¨nh bi·ªÉu ƒë·ªì
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          boxWidth: 10,
          font: {
            size: 12,
          },
        },
      },
      tooltip: {
        callbacks: {
          label: function(context) {
            let label = context.dataset.label || '';
            if (label) {
              label += ': ';
            }
            if (context.parsed.y !== null) {
              label += new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
                maximumFractionDigits: 0,
              }).format(context.parsed.y * 1000000);
            }
            return label;
          }
        }
      }
    },
    scales: {
      x: {
        grid: {
          color: 'rgba(200, 200, 200, 0.3)',
        },
      },
      y: {
        beginAtZero: true,
        grid: {
          color: 'rgba(200, 200, 200, 0.3)',
        },
        ticks: {
          callback: function(value) {
            return value + 'tr';
          }
        }
      }
    },
  };

  // Format ti·ªÅn t·ªá Vi·ªát Nam
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', { 
      style: 'decimal',
      maximumFractionDigits: 0 
    }).format(amount) + ' ƒë';
  };

  // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì kh√¥ng
  const hasChartData = useMemo(() => {
    return filteredMonthlyData && filteredMonthlyData.some(item => item.revenue > 0);
  }, [filteredMonthlyData]);

  // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu t·ªïng qu√°t kh√¥ng
  const hasDashboardData = useMemo(() => {
    return totalRevenue > 0 || averageMonthlyRevenue > 0 || totalCustomers > 0;
  }, [totalRevenue, averageMonthlyRevenue, totalCustomers]);

  return (
    <Box sx={{ bgcolor: "#f0f0f0", minHeight: "100vh", width:'99vw' }}>
    <div className="manager-container">
      {/* Sidebar */}
      <div className="sidebar">
        <div className="logo-container">
          <div className="logo" style={{ marginRight: '15px', cursor: 'pointer' }} onClick={() => navigate("/")}>
            <img 
              src="/images/logo.png" 
              alt="Beauty Cosmetics"
              style={{
                width: 60, 
                height: 60, 
                borderRadius: '50%',
                objectFit: 'cover'
              }}
            />
          </div>
          <div className="brand" style={{ cursor: 'pointer' }} onClick={() => navigate("/")}>
            <div>BEAUTY</div>
            <div>COSMETICS</div>
          </div>
        </div>
        
        <div className="sidebar-title">MANAGER</div>
        
        <div className="sidebar-menu">
          {sidebarItems.map((item) => (
            <div key={item.id} className={`sidebar-item ${activeItem === item.id ? 'active' : ''}`} onClick={() => { setActiveItem(item.id); navigate(`/${item.id}`); }} style={{ cursor: 'pointer' }}>
              <span className="sidebar-icon">{item.icon}</span>
              <span className="sidebar-text">{item.name}</span>
            </div>
          ))}
        </div>
      </div>

      {/* Main Content */}
      <div className="main-content">
        {/* Header */}
        <div className="dashboard-header">
          <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', alignItems: 'center' }}>
            <Typography variant="h5" fontWeight="bold">B√°o C√°o Doanh Thu</Typography>
            <div style={{ display: 'flex', gap: '10px' }}>
              <FormControl variant="outlined" size="small" sx={{ minWidth: 90 }}>
                <Select
                  value={monthDisplay}
                  onChange={handleMonthDisplayChange}
                  displayEmpty
                  inputProps={{ 'aria-label': 'month-range' }}
                >
                  <MenuItem value={3}>3 th√°ng</MenuItem>
                  <MenuItem value={6}>6 th√°ng</MenuItem>
                  <MenuItem value={12}>12 th√°ng</MenuItem>
                </Select>
              </FormControl>
              <FormControl variant="outlined" size="small" sx={{ minWidth: 90 }}>
                <Select
                  value={selectedYear}
                  onChange={handleYearChange}
                  displayEmpty
                  inputProps={{ 'aria-label': 'year' }}
                >
                  <MenuItem value={2022}>2022</MenuItem>
                  <MenuItem value={2023}>2023</MenuItem>
                  <MenuItem value={2024}>2024</MenuItem>
                  <MenuItem value={2025}>2025</MenuItem>
                </Select>
              </FormControl>
            </div>
          </div>
        </div>
        
        {/* Dashboard Metrics */}
        <Grid container spacing={2} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6} md={4}>
            <Paper sx={{ p: 2, borderRadius: 2, textAlign: 'center', boxShadow: 2 }}>
              <Typography color="textSecondary" variant="subtitle2">
                T·ªïng Doanh Thu
              </Typography>
              <Typography variant="h5" fontWeight="bold" color="primary">
                {totalRevenue > 0 ? formatCurrency(totalRevenue) : "Kh√¥ng c√≥ d·ªØ li·ªáu"}
              </Typography>
            </Paper>
          </Grid>
          <Grid item xs={12} sm={6} md={4}>
            <Paper sx={{ p: 2, borderRadius: 2, textAlign: 'center', boxShadow: 2 }}>
              <Typography color="textSecondary" variant="subtitle2">
                Doanh Thu TB/Th√°ng
              </Typography>
              <Typography variant="h5" fontWeight="bold" color="primary">
                {averageMonthlyRevenue > 0 ? formatCurrency(averageMonthlyRevenue) : "Kh√¥ng c√≥ d·ªØ li·ªáu"}
              </Typography>
            </Paper>
          </Grid>
          <Grid item xs={12} sm={6} md={4}>
            <Paper sx={{ p: 2, borderRadius: 2, textAlign: 'center', boxShadow: 2 }}>
              <Typography color="textSecondary" variant="subtitle2">
                T·ªïng Kh√°ch H√†ng
              </Typography>
              <Typography variant="h5" fontWeight="bold" color="primary">
                {totalCustomers > 0 ? totalCustomers : "Kh√¥ng c√≥ d·ªØ li·ªáu"}
              </Typography>
            </Paper>
          </Grid>
        </Grid>
        
        {/* Revenue Chart */}
        <Paper sx={{ p: 3, mb: 3, borderRadius: 2, boxShadow: 2 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Bi·ªÉu ƒê·ªì Doanh Thu {monthDisplay === 12 ? 'H√†ng Th√°ng' : `${monthDisplay} Th√°ng`} {selectedYear}
          </Typography>
          <div style={{ height: '300px' }}>
            {isLoading && (
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
                <Typography>ƒêang t·∫£i d·ªØ li·ªáu...</Typography>
              </Box>
            )}
            
            {!isLoading && hasChartData && <Line data={chartData} options={chartOptions} />}
            
            {!isLoading && !hasChartData && (
              <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>
                <Typography>Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu cho {selectedYear}</Typography>
              </Box>
            )}
          </div>
        </Paper>
        
        {/* Revenue Table */}
        <Paper sx={{ p: 3, borderRadius: 2, boxShadow: 2 }}>
          <Typography variant="h6" sx={{ mb: 2 }}>
            Chi Ti·∫øt Doanh Thu {monthDisplay === 12 ? 'H√†ng Th√°ng' : `${monthDisplay} Th√°ng`} {selectedYear}
          </Typography>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Th√°ng</TableCell>
                  <TableCell align="right">Doanh Thu</TableCell>
                  <TableCell align="right">S·ªë ƒê∆°n H√†ng</TableCell>
                  <TableCell align="right">S·ªë Kh√°ch H√†ng</TableCell>
                  <TableCell align="right">TB/Kh√°ch</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {isLoading ? (
                  <TableRow>
                    <TableCell colSpan={5} align="center">ƒêang t·∫£i d·ªØ li·ªáu...</TableCell>
                  </TableRow>
                ) : filteredMonthlyData.length > 0 ? (
                  filteredMonthlyData.map((row) => (
                    <TableRow key={row.month}>
                      <TableCell component="th" scope="row">{row.monthName}</TableCell>
                      <TableCell align="right">{row.revenue > 0 ? formatCurrency(row.revenue) : "Kh√¥ng c√≥ d·ªØ li·ªáu"}</TableCell>
                      <TableCell align="right">{row.orders > 0 ? row.orders : "-"}</TableCell>
                      <TableCell align="right">{row.customers > 0 ? row.customers : "-"}</TableCell>
                      <TableCell align="right">{row.averagePerCustomer > 0 ? formatCurrency(row.averagePerCustomer) : "-"}</TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={5} align="center">Kh√¥ng c√≥ d·ªØ li·ªáu cho nƒÉm {selectedYear}</TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      </div>
    </div>
    </Box>
  );
};

export default Revenue;
