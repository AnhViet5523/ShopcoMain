import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Pagination } from '@mui/material';
import adminService from '../../apis/adminService'; 
import userService from '../../apis/userService';
import orderService from '../../apis/orderService';
import './Manager.css';

const ViewOrder = () => {
  const [activeTab, setActiveTab] = useState('T·∫•t c·∫£');
  const [activeItem, setActiveItem] = useState('');
  const [orders, setOrders] = useState([]); 
  const [loading, setLoading] = useState(true); 
  const [orderItems, setOrderItems] = useState([]);
  const [searchKey, setSearchKey] = useState(''); 
  const [cancelledOrders, setCancelledOrders] = useState([]);
  const [page, setPage] = useState(1);
  const pageSize = 15; // Thay ƒë·ªïi pageSize t·ª´ 10 th√†nh 15
  const [lastDeliveredOrderId, setLastDeliveredOrderId] = useState(null); // L∆∞u tr·ªØ ID ƒë∆°n h√†ng cu·ªëi c√πng ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ giao
  const navigate = useNavigate();

  // T√≠nh to√°n c√°c ƒë∆°n h√†ng cho trang hi·ªán t·∫°i
  const paginatedOrders = (orders) => {
    const startIndex = (page - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    return orders.slice(startIndex, endIndex);
  };

  const sidebarItems = [
    { id: 'revenue', name: 'Doanh thu', icon: 'üìä' },
    { id: 'staff', name: 'Nh√¢n vi√™n', icon: 'üë§' },
    { id: 'viewOrder', name: 'ƒê∆°n h√†ng', icon: 'üìã' },
    { id: 'product', name: 'S·∫£n ph·∫©m', icon: 'üì¶' },
    { id: 'viewCustomer', name: 'H·ªì s∆° kh√°ch h√†ng', icon: 'üìù' },
    { id: 'viewSupport', name: 'ƒê∆°n h·ªó tr·ª£', icon: 'üì´' },
    { id: 'voucher', name: 'Vouchers', icon: 'üé´' },
    { id: 'feedback', name: 'Feedback', icon: 'üì¢' },
    { id: 'blogManager', name: 'Blog', icon: 'üì∞' }
  ];

  const tabs = ['T·∫•t c·∫£', 'ƒê∆°n h√†ng v·∫≠n chuy·ªÉn', 'ƒê∆°n h√†ng b·ªã h·ªßy', 'Giao th√†nh c√¥ng'];

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const response = await adminService.getAllOrders();
        console.log('Response t·ª´ API:', response);
        if (response && response.$values && Array.isArray(response.$values)) {
          setOrders(response.$values);
          const itemsPromises = response.$values.map(order => orderService.getOrderItems(order.orderId));
          const allOrderItems = await Promise.all(itemsPromises);
          setOrderItems(allOrderItems);
        } else {
          console.error('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:', response);
        }
      } catch (error) {
        console.error('Error fetching orders:', error);
      } finally {
        setLoading(false);
      }
    };

    const fetchCancelledOrders = async () => {
      try {
        const response = await adminService.getCancelledOrders();
        console.log('Response t·ª´ API cancelled orders:', response);
        if (response && response.$values && Array.isArray(response.$values)) {
          setCancelledOrders(response.$values);
        } else {
          console.error('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:', response);
        }
      } catch (error) {
        console.error('Error fetching cancelled orders:', error);
      }
    };

    fetchOrders();
    fetchCancelledOrders();
  }, []);

  const getUserName = async (userId) => {
    try {
      const user = await userService.getUserProfile(userId);
      return user.name;
    } catch (error) {
      console.error('Error fetching user name:', error);
      return 'Unknown';
    }
  };

  // H√†m l·ªçc ƒë∆°n h√†ng theo tab v√† t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredOrders = () => {
    let filtered;
    
    // L·ªçc theo tr·∫°ng th√°i tab
    if (activeTab === 'ƒê∆°n h√†ng v·∫≠n chuy·ªÉn') {
      filtered = orders.filter(order => order.orderStatus === 'Paid' && order.deliveryStatus === 'Not Delivered');
    } else if (activeTab === 'ƒê∆°n h√†ng b·ªã h·ªßy') {
      filtered = cancelledOrders;
    } else if (activeTab === 'Giao th√†nh c√¥ng') {
      filtered = orders.filter(order => order.orderStatus === 'Completed');
      
      // S·∫Øp x·∫øp ƒë·ªÉ ƒë∆°n h√†ng m·ªõi giao hi·ªÉn th·ªã l√™n ƒë·∫ßu
      if (lastDeliveredOrderId) {
        filtered.sort((a, b) => {
          if (a.orderId === lastDeliveredOrderId) return -1;
          if (b.orderId === lastDeliveredOrderId) return 1;
          return 0;
        });
      }
    } else {
      filtered = orders; // Tab "T·∫•t c·∫£"
    }

    // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
    if (searchKey) {
      const lowerCaseSearchKey = searchKey.toLowerCase();
      filtered = filtered.filter(order => 
        order.userId?.toString().includes(lowerCaseSearchKey) ||
        order.orderId?.toString().includes(lowerCaseSearchKey) ||
        order.note?.toLowerCase().includes(lowerCaseSearchKey) ||
        order.orderStatus?.toLowerCase().includes(lowerCaseSearchKey) ||
        order.totalAmount?.toString().includes(lowerCaseSearchKey) ||
        order.deliveryStatus?.toLowerCase().includes(lowerCaseSearchKey) ||
        order.deliveryAddress?.toLowerCase().includes(lowerCaseSearchKey) ||
        order.voucherId?.toString().includes(lowerCaseSearchKey) ||
        order.orderDate?.toLowerCase().includes(lowerCaseSearchKey)
      );
    }

    return filtered;
  };

  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };

  useEffect(() => {
    setPage(1); // Reset v·ªÅ trang 1 khi thay ƒë·ªïi tab ho·∫∑c searchKey
  }, [activeTab, searchKey]);

  const handleClearSearch = () => {
    setSearchKey('');
  };

  const handleApproveCancellation = async (cancelRequestId) => {
    try {
      await adminService.approveCancellation(cancelRequestId);
      setCancelledOrders(prevOrders => 
        prevOrders.map(order => 
          order.cancelRequestId === cancelRequestId ? { ...order, status: 'Approved' } : order
        )
      );
      const response = await adminService.getAllOrders();
      setOrders(response.$values);
    } catch (error) {
      console.error('Error approving cancellation:', error);
    }
  };

  const handleRejectCancellation = async (cancelRequestId) => {
    try {
      await adminService.rejectCancellation(cancelRequestId);
      setCancelledOrders(prevOrders => 
        prevOrders.map(order => 
          order.cancelRequestId === cancelRequestId ? { ...order, status: 'Rejected' } : order
        )
      );
      const response = await adminService.getAllOrders();
      setOrders(response.$values);
    } catch (error) {
      console.error('Error rejecting cancellation:', error);
    }
  };

  const isCancellationApproved = (order) => order.status === 'Approved';
  const isCancellationRejected = (order) => order.status === 'Rejected';

  const handleDelivered = async (orderId) => {
    try {
      await adminService.markOrderAsDelivered(orderId);
      console.log('Order marked as delivered:', orderId);
      // Refresh the orders list
      const response = await adminService.getAllOrders();
      console.log('Updated orders:', response.$values);
      setOrders(response.$values);
      
      // L∆∞u ID c·ªßa ƒë∆°n h√†ng v·ª´a ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ giao
      setLastDeliveredOrderId(orderId);
      
      // Chuy·ªÉn sang tab "Giao th√†nh c√¥ng" sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
      setActiveTab('Giao th√†nh c√¥ng');
      
      // Th√¥ng b√°o th√†nh c√¥ng cho ng∆∞·ªùi d√πng
      alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh "ƒê√£ giao" th√†nh c√¥ng!');
    } catch (error) {
      console.error('Error marking order as delivered:', error);
      alert('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  return (
    <Box sx={{ bgcolor: "#f0f0f0", minHeight: "100vh", width: '99vw' }}>
      <div className="manager-container">
        <div className="sidebar">
          <div className="logo-container">
            <div className="logo" style={{ marginRight: '15px', cursor: 'pointer' }} onClick={() => navigate("/")}>
              <img 
                src="/images/logo.png" 
                alt="Beauty Cosmetics"
                style={{ width: 60, height: 60, borderRadius: '50%', objectFit: 'cover' }}
              />
            </div>
            <div className="brand" style={{ cursor: 'pointer' }} onClick={() => navigate("/")}>
              <div>BEAUTY</div>
              <div>COSMETICS</div>
            </div>
          </div>
          <div className="sidebar-title">MANAGER</div>
          <div className="sidebar-menu">
            {sidebarItems.map((item) => (
              <div 
                key={item.id} 
                className={`sidebar-item ${activeItem === item.id ? 'active' : ''}`} 
                onClick={() => { setActiveItem(item.id); navigate(`/${item.id}`); }} 
                style={{ cursor: 'pointer' }}
              >
                <span className="sidebar-icon">{item.icon}</span>
                <span className="sidebar-text">{item.name}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="main-content">
          <div className="dashboard-header">
            <div className="search-bar" style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
              <input 
                type="text" 
                placeholder="T√¨m ki·∫øm theo UserID, OrderID, Note, OrderStatus, TotalAmount, DeliveryStatus, DeliveryAddress..." 
                value={searchKey} 
                onChange={(e) => setSearchKey(e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 15px',
                  borderRadius: '5px',
                  border: '1px solid #ddd',
                  fontSize: '14px',
                  color: '#000000',
                  backgroundColor: '#ffffff',
                  outline: 'none',
                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                }}
              />
              {searchKey && (
                <button
                  onClick={handleClearSearch}
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  X√≥a
                </button>
              )}
            </div>
          </div>

          <div className="dashboard-title-bar">
            <h1>ƒê∆°n H√†ng</h1>
          </div>

          <div className="dashboard-tabs" style={{ 
            display: 'flex', 
            marginBottom: '20px',
            borderBottom: '2px solid #e9ecef'
          }}>
            {tabs.map((tab) => (
              <div 
                key={tab}
                className={`tab ${activeTab === tab ? 'active' : ''}`}
                onClick={() => {
                  setActiveTab(tab);
                }}
                style={{
                  padding: '12px 20px',
                  cursor: 'pointer',
                  borderBottom: activeTab === tab ? '3px solid #007bff' : '3px solid transparent',
                  color: activeTab === tab ? '#007bff' : '#495057',
                  fontWeight: activeTab === tab ? '600' : '400',
                  transition: 'all 0.2s ease',
                  marginRight: '5px'
                }}
              >
                {tab}
              </div>
            ))}
          </div>

          <div className="dashboard-table">
            <table>
              <thead>
                <tr>
                  {activeTab === 'ƒê∆°n h√†ng b·ªã h·ªßy' ? (
                    <>
                      <th>ID</th>
                      <th>ID ƒê∆†N H√ÄNG</th>
                      <th>T√äN ƒê·∫¶Y ƒê·ª¶</th>
                      <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                      <th>L√ù DO</th>
                      <th>NG√ÄY Y√äU C·∫¶U</th>
                      <th>TR·∫†NG TH√ÅI</th>
                      <th>H√ÄNH ƒê·ªòNG</th>
                    </>
                  ) : activeTab === 'ƒê∆°n h√†ng v·∫≠n chuy·ªÉn' ? (
                    <>
                      <th>ID ƒê∆†N H√ÄNG</th>
                      <th>ID NG∆Ø·ªúI D√ôNG</th>
                      <th>T√äN S·∫¢N PH·∫®M</th>
                      <th>GI√Å</th>
                      <th>S·ªê L∆Ø·ª¢NG</th>
                      <th>M√É GI·∫¢M GI√Å</th>
                      <th>T·ªîNG TI·ªÄN</th>
                      <th>NG√ÄY ƒê·∫∂T H√ÄNG</th>
                      <th>T√åNH TR·∫†NG ƒê∆†N H√ÄNG</th>
                      <th>T√åNH TR·∫†NG GIAO H√ÄNG</th>
                      <th>ƒê·ªäA CH·ªà</th>          
                      <th>GHI CH√ö</th>
                      <th>H√ÄNH ƒê·ªòNG</th>
                    </>
                  ) : (
                    <>
                      <th>ID ƒê∆†N H√ÄNG</th>
                      <th>ID NG∆Ø·ªúI D√ôNG</th>
                      <th>T√äN S·∫¢N PH·∫®M</th>
                      <th>GI√Å</th>
                      <th>S·ªê L∆Ø·ª¢NG</th>
                      <th>M√É GI·∫¢M GI√Å</th>
                      <th>T·ªîNG TI·ªÄN</th>
                      <th>NG√ÄY ƒê·∫∂T H√ÄNG</th>
                      <th>T√åNH TR·∫†NG ƒê∆†N H√ÄNG</th>
                      <th>T√åNH TR·∫†NG GIAO H√ÄNG</th>
                      <th>ƒê·ªäA CH·ªà</th>          
                      <th>GHI CH√ö</th>
                    </>
                  )}
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td colSpan={activeTab === 'ƒê∆°n h√†ng v·∫≠n chuy·ªÉn' || activeTab === 'ƒê∆°n h√†ng b·ªã h·ªßy' ? "13" : "12"} className="empty-data-message">
                      ƒêang t·∫£i d·ªØ li·ªáu ƒë∆°n h√†ng...
                    </td>
                  </tr>
                ) : filteredOrders().length > 0 ? (
                  paginatedOrders(filteredOrders()).map((order) => (
                    activeTab === 'ƒê∆°n h√†ng b·ªã h·ªßy' ? (
                      <tr key={order.cancelRequestId}>
                        <td>{order.cancelRequestId}</td>
                        <td>{order.orderId}</td>
                        <td>{order.fullName}</td>
                        <td>{order.phone}</td>
                        <td>{order.reason}</td>
                        <td>{order.requestDate}</td>
                        <td>{order.status}</td>
                        <td>
                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                            <button
                              onClick={() => handleApproveCancellation(order.cancelRequestId)}
                              disabled={isCancellationApproved(order) || isCancellationRejected(order)}
                              style={{
                                padding: '5px 10px',
                                backgroundColor: isCancellationApproved(order) || isCancellationRejected(order) ? '#6c757d' : '#28a745',
                                color: 'white',
                                border: 'none',
                                borderRadius: '5px',
                                cursor: isCancellationApproved(order) || isCancellationRejected(order) ? 'not-allowed' : 'pointer',
                                fontSize: '14px',
                                flex: '1',
                                marginRight: '5px',
                              }}
                            >
                              ƒê·ªìng √Ω
                            </button>
                            <button
                              onClick={() => handleRejectCancellation(order.cancelRequestId)}
                              disabled={isCancellationApproved(order) || isCancellationRejected(order)}
                              style={{
                                padding: '5px 10px',
                                backgroundColor: isCancellationApproved(order) || isCancellationRejected(order) ? '#6c757d' : '#dc3545',
                                color: 'white',
                                border: 'none',
                                borderRadius: '5px',
                                cursor: isCancellationApproved(order) || isCancellationRejected(order) ? 'not-allowed' : 'pointer',
                                fontSize: '14px',
                                flex: '1',
                                marginLeft: '5px',
                              }}
                            >
                              T·ª´ ch·ªëi
                            </button>
                          </div>
                        </td>
                      </tr>
                    ) : (
                      <tr key={order.orderId}>
                        <td>{order.orderId}</td>
                        <td>{order.userId}</td>
                        <td>{order.items?.$values.map(item => item.productName).join(', ')}</td>
                        <td>{order.items?.$values.map(item => item.price).join(', ')}</td>
                        <td>{order.items?.$values.map(item => item.quantity).join(', ')}</td>
                        <td>{order.voucherId}</td>
                        <td>{order.totalAmount}</td>
                        <td>{order.orderDate}</td>
                        <td>{order.orderStatus}</td>
                        <td>{order.deliveryStatus}</td>
                        <td>{order.deliveryAddress}</td>
                        <td>{order.note}</td>
                        {activeTab === 'ƒê∆°n h√†ng v·∫≠n chuy·ªÉn' && (
                          <td>
                            <button
                              onClick={() => handleDelivered(order.orderId)}
                              style={{
                                padding: '5px 10px',
                                backgroundColor: '#28a745',
                                color: 'white',
                                border: 'none',
                                borderRadius: '5px',
                                cursor: 'pointer',
                                fontSize: '14px'
                              }}
                            >
                              ƒê√£ giao
                            </button>
                          </td>
                        )}
                      </tr>
                    )
                  ))
                ) : (
                  <tr>
                    <td colSpan={activeTab === 'ƒê∆°n h√†ng v·∫≠n chuy·ªÉn' || activeTab === 'ƒê∆°n h√†ng b·ªã h·ªßy' ? "13" : "12"} className="empty-data-message">
                      Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {filteredOrders().length > 0 && (
            <div style={{ 
              display: 'flex', 
              justifyContent: 'center', 
              marginTop: '20px',
              marginBottom: '20px'
            }}>
              <Pagination 
                count={Math.ceil(filteredOrders().length / pageSize)} 
                page={page} 
                onChange={handlePageChange} 
                variant="outlined" 
                color="primary" 
                showFirstButton 
                showLastButton
                size="large"
              />
            </div>
          )}
        </div>
      </div>
    </Box>
  );
};

export default ViewOrder;