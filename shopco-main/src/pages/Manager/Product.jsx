import { useState, useEffect, useMemo } from 'react';
import { FaFilter } from 'react-icons/fa';
import { Box, Dialog, DialogTitle, DialogContent, DialogActions, Button, Select, MenuItem, Pagination, CircularProgress, TextField, Typography } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import './Manager.css';
import productService from '../../apis/productService';
import categoryService from '../../apis/categoryService';
import adminService from '../../apis/adminService';
import productImageService from '../../apis/productImageService';

const Product = () => {
  const [activeTab, setActiveTab] = useState('T·∫•t c·∫£');
  const navigate = useNavigate();
  const [products, setProducts] = useState([]);
  const [filteredCount, setFilteredCount] = useState(0);
  const [openFilterDialog, setOpenFilterDialog] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedSkinType, setSelectedSkinType] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [originalProducts, setOriginalProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // Ph√¢n trang
  const [page, setPage] = useState(1);
  const pageSize = 20;

  // Th√™m state cho dialog v√† form th√™m s·∫£n ph·∫©m
  const [openAddDialog, setOpenAddDialog] = useState(false);
  const [newProduct, setNewProduct] = useState({
    productCode: '',
    productName: '',
    categoryId: '',
    quantity: '',
    capacity: '',
    price: '',
    brand: '',
    origin: '',
    status: 'Available',
    imgURL: '',
    skinType: '',
    description: '',
    ingredients: '',
    usageInstructions: '',
    manufactureDate: null,
    ngayNhapKho: null
  });

  // Th√™m bi·∫øn l∆∞u tr·ªØ mapping gi·ªØa t√™n danh m·ª•c v√† ID
  const [categoryMapping, setCategoryMapping] = useState({});

  // Th√™m state cho dialog chi ti·∫øt s·∫£n ph·∫©m
  const [openDetailDialog, setOpenDetailDialog] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);

  // Th√™m state cho dialog xem t·∫•t c·∫£ ·∫£nh
  const [openImageGallery, setOpenImageGallery] = useState(false);

  // Th√™m state cho l∆∞u tr·ªØ ·∫£nh s·∫£n ph·∫©m
  const [productImages, setProductImages] = useState([]);

  // Th√™m state cho vi·ªác ch·ªânh s·ª≠a s·∫£n ph·∫©m
  const [editingProductId, setEditingProductId] = useState(null);

  // Th√™m state cho ch·ª©c nƒÉng s·ª≠a ·∫£nh
  const [openEditImagesDialog, setOpenEditImagesDialog] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);
  const [newImageFile, setNewImageFile] = useState(null);
  const [reorderedImages, setReorderedImages] = useState([]);
  const [uploadingImage, setUploadingImage] = useState(false);

  // Th√™m state n√†y ·ªü c√πng v·ªã tr√≠ v·ªõi c√°c state kh√°c
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);

  const sidebarItems = [
    { id: 'revenue', name: 'Doanh thu', icon: 'üìä' },
    { id: 'staff', name: 'Nh√¢n vi√™n', icon: 'üë§' },
    { id: 'viewOrder', name: 'ƒê∆°n h√†ng', icon: 'üìã' },
    { id: 'product', name: 'S·∫£n ph·∫©m', icon: 'üì¶' },
    { id: 'viewCustomer', name: 'H·ªì s∆° kh√°ch h√†ng', icon: 'üìù' },
    { id: 'viewSupport', name: 'ƒê∆°n h·ªó tr·ª£', icon: 'üì´' },
    { id: 'voucher', name: 'Vouchers', icon: 'üé´' },
    { id: 'feedback', name: 'Feedback', icon: 'üì¢' },
  ];

  const tabs = ['T·∫•t c·∫£', 'H√†ng m·ªõi nh·∫≠p', 'H√†ng s·∫Øp h·∫øt'];

  // L·∫•y danh s√°ch danh m·ª•c
  const fetchCategories = async () => {
    try {
      console.log('B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch danh m·ª•c...');
      const response = await categoryService.getCategories();
      console.log('Ph·∫£n h·ªìi API danh m·ª•c:', response);
      
      const map = {};
      const idMapping = {}; // Th√™m mapping cho ID
      
      // Ki·ªÉm tra c·∫•u tr√∫c response
      if (Array.isArray(response)) {
        // N·∫øu response l√† m·∫£ng tr·ª±c ti·∫øp
        console.log(`X·ª≠ l√Ω ${response.length} danh m·ª•c t·ª´ m·∫£ng`);
        response.forEach(category => {
          if (category && category.categoryId !== undefined) {
            map[category.categoryId] = {
              categoryType: category.categoryType || 'Unknown',
              categoryName: category.categoryName || 'Unknown'
            };
            
            // T·∫°o mapping ng∆∞·ª£c t·ª´ t√™n ƒë·∫øn ID
            const key = `${category.categoryType || 'Unknown'} - ${category.categoryName || 'Unknown'}`;
            idMapping[key] = category.categoryId;
          }
        });
      } else if (response && response.$values && Array.isArray(response.$values)) {
        // N·∫øu response c√≥ c·∫•u tr√∫c $values
        console.log(`X·ª≠ l√Ω ${response.$values.length} danh m·ª•c t·ª´ $values`);
        response.$values.forEach(category => {
          if (category && category.categoryId !== undefined) {
            map[category.categoryId] = {
              categoryType: category.categoryType || 'Unknown',
              categoryName: category.categoryName || 'Unknown'
            };
            
            // T·∫°o mapping ng∆∞·ª£c t·ª´ t√™n ƒë·∫øn ID
            const key = `${category.categoryType || 'Unknown'} - ${category.categoryName || 'Unknown'}`;
            idMapping[key] = category.categoryId;
          }
        });
      } else if (response && typeof response === 'object') {
        // N·∫øu response l√† m·ªôt object nh∆∞ng kh√¥ng c√≥ $values ho·∫∑c kh√¥ng ph·∫£i m·∫£ng
        console.log('X·ª≠ l√Ω danh m·ª•c t·ª´ object');
        Object.entries(response).forEach(([key, categories]) => {
          if (Array.isArray(categories)) {
            categories.forEach(category => {
              if (category && category.categoryId !== undefined) {
                map[category.categoryId] = {
                  categoryType: key,
                  categoryName: category.categoryName || 'Unknown'
                };
                
                // T·∫°o mapping ng∆∞·ª£c t·ª´ t√™n ƒë·∫øn ID
                const mapKey = `${key} - ${category.categoryName || 'Unknown'}`;
                idMapping[mapKey] = category.categoryId;
              }
            });
          }
        });
      }
      
      if (Object.keys(map).length === 0) {
        console.warn('Kh√¥ng c√≥ danh m·ª•c n√†o ƒë∆∞·ª£c x·ª≠ l√Ω');
      } else {
        console.log(`ƒê√£ x·ª≠ l√Ω ${Object.keys(map).length} danh m·ª•c`);
      }
      
      setCategoryMapping(idMapping); // L∆∞u mapping v√†o state
      console.log('Category mapping:', map);
      console.log('ID mapping:', idMapping);
      return map;
    } catch (error) {
      console.error('Error fetching categories:', error);
      console.error('Error details:', error.message);
      console.error('Error stack:', error.stack);
      return {};
    }
  };

  // X·ª≠ l√Ω s·∫£n ph·∫©m v·ªõi danh m·ª•c ƒë√£ bi·∫øt
  const processProducts = (productsArray, categories) => {
    console.log('B·∫Øt ƒë·∫ßu x·ª≠ l√Ω s·∫£n ph·∫©m v·ªõi danh m·ª•c:', { productsArray, categories });
    
    if (!productsArray || productsArray.length === 0) {
      console.warn('Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ x·ª≠ l√Ω');
      return [];
    }
    
    // Ki·ªÉm tra c·∫•u tr√∫c c·ªßa s·∫£n ph·∫©m ƒë·∫ßu ti√™n ƒë·ªÉ hi·ªÉu c·∫•u tr√∫c d·ªØ li·ªáu
    const firstProduct = productsArray[0];
    console.log('C·∫•u tr√∫c s·∫£n ph·∫©m ƒë·∫ßu ti√™n:', firstProduct);
    
    return productsArray.map(product => {
      // L·∫•y ID s·∫£n ph·∫©m, h·ªó tr·ª£ nhi·ªÅu c√°ch ƒë·∫∑t t√™n
      const productId = product.productId || product.ProductID || product.productID || product.id;
      
      // L·∫•y ID danh m·ª•c, h·ªó tr·ª£ nhi·ªÅu c√°ch ƒë·∫∑t t√™n
      const categoryId = product.categoryId || product.CategoryID || product.categoryID;
      
      // L·∫•y th√¥ng tin danh m·ª•c t·ª´ mapping
      const categoryInfo = categories[categoryId] || { categoryType: 'Unknown', categoryName: 'Unknown' };
      
      return {
        ProductID: productId,
        ProductCode: product.productCode || product.ProductCode || '',
        categoryType: categoryInfo.categoryType,
        categoryName: categoryInfo.categoryName,
        categoryDisplay: `${categoryInfo.categoryType} - ${categoryInfo.categoryName}`,
        ProductName: product.productName || product.ProductName || product.name || '',
        Quantity: product.quantity || product.Quantity || 0,
        Capacity: product.capacity || product.Capacity || '',
        Price: product.price || product.Price || 0,
        Brand: product.brand || product.Brand || '',
        Origin: product.origin || product.Origin || '',
        Status: product.status || product.Status || 'Unknown',
        ImgURL: product.imgURL || product.ImgURL || product.imgUrl || product.image || '',
        SkinType: product.skinType || product.SkinType || '',
        Description: product.description || product.Description || '',
        Ingredients: product.ingredients || product.Ingredients || '',
        UsageInstructions: product.usageInstructions || product.UsageInstructions || '',
        ManufactureDate: product.manufactureDate || product.ManufactureDate || null,
        ngayNhapKho: product.ngayNhapKho || product.importDate || null
      };
    });
  };

  // L·∫•y danh s√°ch s·∫£n ph·∫©m
  const fetchProducts = async (categories = null) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('B·∫Øt ƒë·∫ßu l·∫•y danh s√°ch s·∫£n ph·∫©m...');
      
      // N·∫øu ch∆∞a c√≥ danh m·ª•c, l·∫•y danh m·ª•c tr∆∞·ªõc
      const categoryData = categories || await fetchCategories();
      console.log('D·ªØ li·ªáu danh m·ª•c:', categoryData);
      
      // L·∫•y s·∫£n ph·∫©m v·ªõi ph√¢n trang (n·∫øu API h·ªó tr·ª£)
      // N·∫øu API kh√¥ng h·ªó tr·ª£ ph√¢n trang, l·∫•y t·∫•t c·∫£ v√† x·ª≠ l√Ω ph√¢n trang ·ªü client
      console.log('G·ªçi API l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m...');
      const response = await productService.getAllProducts();
      console.log('Ph·∫£n h·ªìi API s·∫£n ph·∫©m:', response);
      
      // X·ª≠ l√Ω d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng c√≥ th·ªÉ c√≥
      let productsArray = [];
      if (response && response.$values) {
        productsArray = response.$values;
      } else if (Array.isArray(response)) {
        productsArray = response;
      } else if (response && typeof response === 'object') {
        // N·∫øu response l√† m·ªôt object nh∆∞ng kh√¥ng c√≥ $values, th·ª≠ xem n√≥ c√≥ ph·∫£i l√† m·ªôt s·∫£n ph·∫©m kh√¥ng
        if (response.productId || response.ProductID) {
          productsArray = [response];
        }
      }
      
      console.log(`ƒê√£ nh·∫≠n ƒë∆∞·ª£c ${productsArray.length} s·∫£n ph·∫©m t·ª´ API`);
      
      if (productsArray.length === 0) {
        console.warn('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ API');
        setProducts([]);
        setOriginalProducts([]);
        setLoading(false);
        return;
      }
      
      // X·ª≠ l√Ω s·∫£n ph·∫©m v·ªõi danh m·ª•c
      const processedProducts = processProducts(productsArray, categoryData);
      console.log('S·∫£n ph·∫©m ƒë√£ x·ª≠ l√Ω:', processedProducts);
      
      setProducts(processedProducts);
      setOriginalProducts(processedProducts);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching products:', error);
      console.error('Error details:', error.message);
      console.error('Error stack:', error.stack);
      setError('ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m: ' + error.message);
      setLoading(false);
    }
  };

  // G·ªçi l·∫ßn ƒë·∫ßu khi component mount
  useEffect(() => {
    fetchProducts();
  }, []);

  // X·ª≠ l√Ω t√¨m ki·∫øm
  useEffect(() => {
    if (!searchTerm.trim()) {
      setProducts(originalProducts);
      // Reset th√¥ng b√°o s·ªë l∆∞·ª£ng l·ªçc khi x√≥a t√¨m ki·∫øm
      setFilteredCount(0);
      return;
    }

    const searchTermLower = searchTerm.toLowerCase().trim();
    const filteredProducts = originalProducts.filter(product => {
      const productName = (product.ProductName || '').toLowerCase();
      const productCode = (product.ProductCode || '').toLowerCase();
      const brand = (product.Brand || '').toLowerCase();
      const categoryType = (product.categoryType || '').toLowerCase();
      const categoryName = (product.categoryName || '').toLowerCase();

      return productName.includes(searchTermLower) ||
             productCode.includes(searchTermLower) ||
             brand.includes(searchTermLower) ||
             categoryType.includes(searchTermLower) ||
             categoryName.includes(searchTermLower);
    });

    setProducts(filteredProducts);
    // C·∫≠p nh·∫≠t th√¥ng b√°o s·ªë l∆∞·ª£ng l·ªçc khi t√¨m ki·∫øm
    setFilteredCount(filteredProducts.length !== originalProducts.length ? filteredProducts.length : 0);
  }, [searchTerm, originalProducts]);

  // S·ª≠ d·ª•ng useMemo ƒë·ªÉ t√≠nh to√°n s·∫£n ph·∫©m hi·ªÉn th·ªã theo tab v√† ph√¢n trang
  const displayedProducts = useMemo(() => {
    console.log('T√≠nh to√°n s·∫£n ph·∫©m hi·ªÉn th·ªã v·ªõi:', { 
      productsLength: products.length, 
      activeTab, 
      page, 
      pageSize 
    });
    
    let filtered = products;
    
    // L·ªçc theo tab
    if (activeTab === 'H√†ng s·∫Øp h·∫øt') {
      filtered = products.filter(product => product.Quantity < 9);
      console.log(`L·ªçc s·∫£n ph·∫©m s·∫Øp h·∫øt: ${filtered.length} s·∫£n ph·∫©m`);
    }
    
    // Ph√¢n trang ·ªü client (n·∫øu API kh√¥ng h·ªó tr·ª£ ph√¢n trang)
    const startIndex = (page - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    
    const result = filtered.slice(startIndex, endIndex);
    console.log(`Ph√¢n trang: hi·ªÉn th·ªã ${result.length} s·∫£n ph·∫©m t·ª´ ${startIndex} ƒë·∫øn ${endIndex-1}`);
    
    return result;
  }, [products, activeTab, page, pageSize]);

  // X·ª≠ l√Ω thay ƒë·ªïi trang
  const handlePageChange = (event, newPage) => {
    setPage(newPage);
  };

  const handleEdit = (productId) => {
    const productToEdit = products.find(p => p.ProductID === productId);
    if (productToEdit) {
      setNewProduct({
        productCode: productToEdit.ProductCode || '',
        productName: productToEdit.ProductName || '',
        categoryId: productToEdit.categoryId || '',
        quantity: productToEdit.Quantity || '',
        capacity: productToEdit.Capacity || '',
        price: productToEdit.Price || '',
        brand: productToEdit.Brand || '',
        origin: productToEdit.Origin || '',
        status: productToEdit.Status || 'Available',
        imgURL: productToEdit.ImgURL || '',
        skinType: productToEdit.SkinType || '',
        description: productToEdit.Description || '',
        ingredients: productToEdit.Ingredients || '',
        usageInstructions: productToEdit.UsageInstructions || '',
        manufactureDate: productToEdit.ManufactureDate || null,
        ngayNhapKho: productToEdit.ngayNhapKho || null
      });
      setEditingProductId(productId);
      setOpenAddDialog(true);
    }
  };

  const handleSubmitEdit = async () => {
    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!newProduct.productName) {
      alert('Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m');
      return;
    }
    if (!newProduct.quantity || isNaN(parseInt(newProduct.quantity))) {
      alert('Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (ph·∫£i l√† s·ªë)');
      return;
    }
    if (!newProduct.price || isNaN(parseFloat(newProduct.price))) {
      alert('Vui l√≤ng nh·∫≠p gi√° s·∫£n ph·∫©m (ph·∫£i l√† s·ªë)');
      return;
    }
    if (!newProduct.categoryId) {
      alert('Vui l√≤ng ch·ªçn danh m·ª•c s·∫£n ph·∫©m');
      return;
    }

    try {
      // Ch·ªâ g·ª≠i c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t theo c·∫•u tr√∫c DB
      const productData = {
        productName: newProduct.productName,
        categoryId: parseInt(newProduct.categoryId),
        quantity: parseInt(newProduct.quantity),
        capacity: newProduct.capacity || "50g",
        price: parseFloat(newProduct.price),
        brand: newProduct.brand || "Vi·ªát",
        origin: newProduct.origin || "Vi·ªát",
        status: newProduct.status || "Available",
        imgUrl: newProduct.imgURL || "15",
        skinType: newProduct.skinType || "Da nh·∫°y c·∫£m",
        description: newProduct.description || "",
        ingredients: newProduct.ingredients || "",
        usageInstructions: newProduct.usageInstructions || "",
        manufactureDate: newProduct.manufactureDate || new Date().toISOString()
      };

      // Kh√¥ng g·ª≠i c√°c tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t
      // ProductID - t·ª± ƒë·ªông tƒÉng
      // ProductCode - ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
      // ImportDate - ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông

      console.log('D·ªØ li·ªáu g·ª≠i ƒëi:', JSON.stringify(productData, null, 2));
      
      await adminService.updateProduct(editingProductId, productData);
      alert('ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng');
      handleDialogClose();
      fetchProducts();
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error);
      alert(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  };

  const handleDelete = async (productId) => {
    try {
      // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi thay ƒë·ªïi tr·∫°ng th√°i
      if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m n√†y?')) {
        // G·ªçi API ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i
        const response = await adminService.toggleProductStatus(productId);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi tr·∫°ng th√°i m·ªõi
        alert(`ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m th√†nh c√¥ng! Tr·∫°ng th√°i m·ªõi: ${response.newStatus}`);
        
        // T·∫£i l·∫°i danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ c·∫≠p nh·∫≠t UI
        fetchProducts();
      }
    } catch (error) {
      console.error('L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m:', error);
      alert(`Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i s·∫£n ph·∫©m: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  };

  const handleFilterClick = () => {
    // Reset filter selections
    setSelectedCategory('');
    setSelectedSkinType('');
    setOpenFilterDialog(true);
  };

  const handleFilterApply = () => {
    console.log('Selected Category:', selectedCategory);
    console.log('Selected SkinType:', selectedSkinType);
    
    // N·∫øu kh√¥ng c√≥ b·ªô l·ªçc n√†o ƒë∆∞·ª£c ch·ªçn, reset v·ªÅ danh s√°ch g·ªëc
    if (!selectedCategory && !selectedSkinType) {
      setProducts(originalProducts);
      setFilteredCount(0);
      setOpenFilterDialog(false);
      return;
    }
    
    const filtered = originalProducts.filter(product => {
      // N·∫øu c√≥ ch·ªçn danh m·ª•c
      let categoryMatch = true;
      if (selectedCategory) {
        // T√¨m th√¥ng tin danh m·ª•c ƒë√£ ch·ªçn t·ª´ categoryOptions
        const selectedCategoryInfo = categoryOptions.find(cat => cat.id === selectedCategory);
        if (selectedCategoryInfo) {
          categoryMatch = product.categoryType === selectedCategoryInfo.categoryType && 
                          product.categoryName === selectedCategoryInfo.categoryName;
        }
      }
      
      // L·ªçc theo lo·∫°i da
      const skinTypeMatch = selectedSkinType ? product.SkinType === selectedSkinType : true;
      
      return categoryMatch && skinTypeMatch;
    });

    console.log('Filtered Products:', filtered);
    // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o n·∫øu c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c l·ªçc v√† kh√°c v·ªõi danh s√°ch g·ªëc
    setFilteredCount(filtered.length !== originalProducts.length ? filtered.length : 0);
    setProducts(filtered);
    setPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi l·ªçc
    setOpenFilterDialog(false);
  };

  const handleCategoryChange = (event) => {
    setSelectedCategory(event.target.value);
  };

  const handleSkinTypeChange = (event) => {
    setSelectedSkinType(event.target.value);
  };

  const handleClear = () => {
    setSearchTerm('');
    setProducts(originalProducts);
    // Reset th√¥ng b√°o s·ªë l∆∞·ª£ng l·ªçc khi x√≥a t√¨m ki·∫øm
    setFilteredCount(0);
  };

  // C·∫≠p nh·∫≠t h√†m handleAdd
  const handleAdd = () => {
    setOpenAddDialog(true);
  };
  
  // Th√™m h√†m ƒë·ªÉ ƒë√≥ng dialog
  const handleDialogClose = () => {
    setOpenAddDialog(false);
    // Reset form data
    setNewProduct({
      productCode: '',
      productName: '',
      categoryId: '',
      quantity: '',
      capacity: '',
      price: '',
      brand: '',
      origin: '',
      status: 'Available',
      imgURL: '',
      skinType: '',
      description: '',
      ingredients: '',
      usageInstructions: '',
      manufactureDate: null,
      ngayNhapKho: null
    });
  };
  
  // Th√™m h√†m x·ª≠ l√Ω thay ƒë·ªïi input
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'categoryId') {
      // Khi ch·ªçn category, l∆∞u gi√° tr·ªã ID (d·∫°ng s·ªë)
      setNewProduct(prev => ({ ...prev, [name]: parseInt(value) || value }));
    } else {
      setNewProduct(prev => ({ ...prev, [name]: value }));
    }
  };
  
  // Th√™m options cho status v√†o component
  const statusOptions = ['Available', 'Unavailable', 'OutOfStock'];

  // C·∫≠p nh·∫≠t h√†m handleSubmitProduct ƒë·ªÉ kh·∫Øc ph·ª•c l·ªói
  const handleSubmitProduct = async () => {
    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!newProduct.productName) {
      alert('Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m');
      return;
    }
    if (!newProduct.quantity || isNaN(parseInt(newProduct.quantity))) {
      alert('Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (ph·∫£i l√† s·ªë)');
      return;
    }
    if (!newProduct.price || isNaN(parseFloat(newProduct.price))) {
      alert('Vui l√≤ng nh·∫≠p gi√° s·∫£n ph·∫©m (ph·∫£i l√† s·ªë)');
      return;
    }
    if (!newProduct.categoryId) {
      alert('Vui l√≤ng ch·ªçn danh m·ª•c s·∫£n ph·∫©m');
      return;
    }
    
    try {
      // Th·ª≠ v·ªõi c·∫•u tr√∫c ƒë∆°n gi·∫£n nh·∫•t c√≥ th·ªÉ
      const productData = {
        productName: newProduct.productName,
        categoryId: 4, // C·ªë ƒë·ªãnh ID = 4 (ƒê·ª©c Tr·ªã - Serum / Tinh Ch·∫•t) ƒë·ªÉ th·ª≠
        quantity: parseInt(newProduct.quantity),
        capacity: newProduct.capacity || "50g",
        price: parseFloat(newProduct.price),
        brand: newProduct.brand || "Vi·ªát",
        origin: newProduct.origin || "Vi·ªát",
        status: "Available", // C·ªë ƒë·ªãnh tr·∫°ng th√°i
        imgUrl: "15", // C·ªë ƒë·ªãnh URL h√¨nh ·∫£nh
        skinType: newProduct.skinType || "Da nh·∫°y c·∫£m",
        description: newProduct.description || "test",
        ingredients: newProduct.ingredients || "test",
        usageInstructions: newProduct.usageInstructions || "test",
        manufactureDate: "2025-01-15T10:45:23.977Z" // C·ªë ƒë·ªãnh ng√†y
      };
      
      console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(productData));
      
      // S·ª≠ d·ª•ng AJAX tr·ª±c ti·∫øp thay v√¨ fetch ƒë·ªÉ th·ª≠
      const xhr = new XMLHttpRequest();
      xhr.open('POST', 'https://localhost:7175/api/Admin/Product', true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      
      xhr.onload = function() {
        if (xhr.status >= 200 && xhr.status < 300) {
          console.log('Th√†nh c√¥ng:', xhr.responseText);
          alert('ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng');
          handleDialogClose();
          fetchProducts();
        } else {
          console.error('L·ªói:', xhr.status, xhr.responseText);
          alert(`Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m: ${xhr.status} - ${xhr.responseText}`);
        }
      };
      
      xhr.onerror = function() {
        console.error('L·ªói k·∫øt n·ªëi');
        alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
      };
      
      xhr.send(JSON.stringify(productData));
    } catch (error) {
      console.error('L·ªói khi th√™m s·∫£n ph·∫©m:', error);
      alert(`Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  };

  // T·∫°o danh s√°ch danh m·ª•c k·∫øt h·ª£p cho b·ªô l·ªçc
  const categoryOptions = useMemo(() => {
    // S·ª≠ d·ª•ng data t·ª´ API n·∫øu c√≥
    if (Object.keys(categoryMapping).length > 0) {
      return Object.entries(categoryMapping).map(([display, id]) => ({
        id: id,
        display: display
      }));
    }
    
    // Fallback n·∫øu ch∆∞a c√≥ data t·ª´ API
    const uniqueCategories = {};
    originalProducts.forEach(product => {
      const key = `${product.categoryType} - ${product.categoryName}`;
      if (!uniqueCategories[key]) {
        uniqueCategories[key] = {
          id: product.ProductID.toString(), // S·ª≠ d·ª•ng ID th·ª±c t·∫ø n·∫øu c√≥
          display: key
        };
      }
    });
    
    return Object.values(uniqueCategories);
  }, [categoryMapping, originalProducts]);
  
  const skinTypes = useMemo(() => {
    return [...new Set(originalProducts.map(product => product.SkinType))];
  }, [originalProducts]);

  // Th√™m h√†m ƒë·ªÉ x√≥a b·ªô l·ªçc
  const handleClearFilters = () => {
    setProducts(originalProducts);
    setFilteredCount(0);
    setSelectedCategory('');
    setSelectedSkinType('');
    setSearchTerm('');
  };

  // C·∫≠p nh·∫≠t h√†m ƒë·ªÉ m·ªü dialog chi ti·∫øt v√† l·∫•y ·∫£nh s·∫£n ph·∫©m
  const handleViewDetail = async (product) => {
    setSelectedProduct(product);
    setOpenDetailDialog(true);
    
    try {
      // L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m t·ª´ API ƒë·ªÉ c√≥ th√¥ng tin ·∫£nh ƒë·∫ßy ƒë·ªß
      const productDetail = await productService.getProductById(product.ProductID);
      console.log('Chi ti·∫øt s·∫£n ph·∫©m:', productDetail);
      
      // X·ª≠ l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m
      let images = [];
      if (productDetail.images && productDetail.images.length > 0) {
        images = productDetail.images;
        console.log('·∫¢nh s·∫£n ph·∫©m t·ª´ API:', images);
      } else if (productDetail.imgURL) {
        images = [{ imgUrl: productDetail.imgURL }];
      } else if (product.ImgURL) {
        images = [{ imgUrl: product.ImgURL }];
      } else {
        images = [{ imgUrl: '/images/default-product.jpg' }];
      }
      
      setProductImages(images);
    } catch (error) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:', error);
      // N·∫øu c√≥ l·ªói, v·∫´n hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán
      setProductImages([{ imgUrl: product.ImgURL || '/images/default-product.jpg' }]);
    }
  };

  // H√†m ƒë·ªÉ l·∫•y URL ·∫£nh
  const getImageUrl = (image) => {
    if (!image) return '/images/default-product.jpg';
    
    // Th√™m timestamp ƒë·ªÉ tr√°nh cache
    const timestamp = new Date().getTime();
    
    // N·∫øu l√† ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß (b·∫Øt ƒë·∫ßu b·∫±ng http ho·∫∑c https)
    if (typeof image === 'string') {
      if (image.startsWith('http')) return `${image}?t=${timestamp}`;
      return `${image}?t=${timestamp}`;
    }
    
    // N·∫øu l√† object c√≥ thu·ªôc t√≠nh imgUrl
    if (image.imgUrl) {
      if (image.imgUrl.startsWith('http')) return `${image.imgUrl}?t=${timestamp}`;
      return `${image.imgUrl}?t=${timestamp}`;
    }
    
    // N·∫øu l√† object c√≥ thu·ªôc t√≠nh imageUrl
    if (image.imageUrl) {
      if (image.imageUrl.startsWith('http')) return `${image.imageUrl}?t=${timestamp}`;
      return `${image.imageUrl}?t=${timestamp}`;
    }
    
    return `/images/default-product.jpg?t=${timestamp}`;
  };

  // Th√™m h√†m ƒë·ªÉ ƒë√≥ng dialog chi ti·∫øt
  const handleCloseDetail = () => {
    setOpenDetailDialog(false);
    setSelectedProduct(null);
  };

  // H√†m x·ª≠ l√Ω m·ªü dialog s·ª≠a ·∫£nh
  const handleOpenEditImages = async () => {
    try {
      setUploadingImage(true);
      console.log("M·ªü dialog s·ª≠a ·∫£nh cho s·∫£n ph·∫©m ID:", selectedProduct.ProductID);
      
      // L·∫•y l·∫°i danh s√°ch ·∫£nh m·ªõi nh·∫•t t·ª´ API
      const response = await productImageService.getProductImages(selectedProduct.ProductID);
      console.log("Ph·∫£n h·ªìi API ·∫£nh (raw):", response);
      
      // ƒê·∫£m b·∫£o newImages l√† m·ªôt m·∫£ng
      let newImages = [];
      if (Array.isArray(response)) {
        console.log("Ph·∫£n h·ªìi l√† m·∫£ng, s·ª≠ d·ª•ng tr·ª±c ti·∫øp");
        newImages = response;
      } else if (response && response.$values && Array.isArray(response.$values)) {
        console.log("Ph·∫£n h·ªìi c√≥ thu·ªôc t√≠nh $values, s·ª≠ d·ª•ng response.$values");
        newImages = response.$values;
      } else if (response && typeof response === 'object') {
        // N·∫øu l√† m·ªôt object ƒë∆°n l·∫ª, ƒë·∫∑t v√†o m·∫£ng
        console.log("Ph·∫£n h·ªìi l√† m·ªôt object ƒë∆°n l·∫ª, ƒë·∫∑t v√†o m·∫£ng");
        newImages = [response];
      }
      
      if (!newImages || newImages.length === 0) {
        console.warn("Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o cho s·∫£n ph·∫©m n√†y!");
        newImages = [];
      }
      
      console.log("Danh s√°ch ·∫£nh ƒë√£ x·ª≠ l√Ω:", newImages);
      
      // Ki·ªÉm tra v√† t√¨m ·∫£nh ƒë·∫°i di·ªán
      let foundMainImage = false;
      
      // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ x√°c ƒë·ªãnh ·∫£nh ƒë·∫°i di·ªán
      const productDetail = await productService.getProductById(selectedProduct.ProductID);
      console.log("Chi ti·∫øt s·∫£n ph·∫©m:", productDetail);
      
      const mainImageUrl = productDetail.imgURL || productDetail.ImgURL;
      console.log("URL ·∫£nh ƒë·∫°i di·ªán:", mainImageUrl);
      
      // X·ª≠ l√Ω t·ª´ng ·∫£nh ƒë·ªÉ ƒë√°nh d·∫•u ·∫£nh ƒë·∫°i di·ªán
      newImages = newImages.map(img => {
        // L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh kh√¥ng bao g·ªìm query string (n·∫øu c√≥)
        const imgUrl = img.imgUrl ? img.imgUrl.split('?')[0] : '';
        console.log(`So s√°nh ·∫£nh: ${imgUrl} v·ªõi ·∫£nh ƒë·∫°i di·ªán: ${mainImageUrl}`);
        
        // N·∫øu URL ·∫£nh tr√πng v·ªõi URL ·∫£nh ƒë·∫°i di·ªán, ƒë√°nh d·∫•u l√† ·∫£nh ƒë·∫°i di·ªán
        const isMain = mainImageUrl && imgUrl === mainImageUrl.split('?')[0];
        
        if (isMain) {
          console.log(`·∫¢nh ID ${img.imageID} ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† ·∫£nh ƒë·∫°i di·ªán`);
          foundMainImage = true;
        }
        
        return { ...img, isMainImage: isMain };
      });
      
      // N·∫øu kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·∫°i di·ªán v√† c√≥ √≠t nh·∫•t m·ªôt ·∫£nh, ƒë·∫∑t ·∫£nh ƒë·∫ßu ti√™n l√†m ·∫£nh ƒë·∫°i di·ªán
      if (!foundMainImage && newImages.length > 0) {
        console.log(`Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·∫°i di·ªán, ƒë·∫∑t ·∫£nh ƒë·∫ßu ti√™n (ID: ${newImages[0].imageID}) l√†m ·∫£nh ƒë·∫°i di·ªán`);
        newImages[0].isMainImage = true;
      }
      
      console.log("Danh s√°ch ·∫£nh cu·ªëi c√πng:", newImages);
      
      // C·∫≠p nh·∫≠t state
      setReorderedImages(newImages);
      setSelectedImage(null);
      setOpenEditImagesDialog(true);
    } catch (error) {
      console.error('L·ªói khi l·∫•y ·∫£nh s·∫£n ph·∫©m:', error);
      alert(`Kh√¥ng th·ªÉ l·∫•y danh s√°ch ·∫£nh: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    } finally {
      setUploadingImage(false);
    }
  };

  // H√†m x·ª≠ l√Ω khi ch·ªçn file ·∫£nh m·ªõi
  const handleImageFileChange = (event) => {
    if (event.target.files && event.target.files[0]) {
      setNewImageFile(event.target.files[0]);
    }
  };

  // H√†m x·ª≠ l√Ω c·∫≠p nh·∫≠t ·∫£nh
  const handleUpdateImage = async (imageId) => {
    if (!newImageFile) {
      alert('Vui l√≤ng ch·ªçn file ·∫£nh');
      return;
    }
    
    try {
      setUploadingImage(true);
      
      // Ki·ªÉm tra xem reorderedImages c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
      if (!reorderedImages || !Array.isArray(reorderedImages)) {
        console.error("reorderedImages kh√¥ng ph·∫£i l√† m·∫£ng:", reorderedImages);
        alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh do d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        return;
      }
      
      const image = reorderedImages.find(img => img.imageID === imageId);
      if (!image) {
        console.error("Kh√¥ng t√¨m th·∫•y ·∫£nh v·ªõi ID:", imageId);
        alert("Kh√¥ng t√¨m th·∫•y ·∫£nh c·∫ßn c·∫≠p nh·∫≠t");
        return;
      }
      
      await productImageService.updateProductImage(imageId, newImageFile, image.displayOrder || 0);
      alert('C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng');
      
      // ƒê√≥ng dialog ch·ªânh s·ª≠a ·∫£nh
      setOpenEditImagesDialog(false);
      
      // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin s·∫£n ph·∫©m
      const productDetail = await productService.getProductById(selectedProduct.ProductID);
      setSelectedProduct({
        ...selectedProduct,
        ImgURL: productDetail.imgURL || productDetail.ImgURL,
        images: productDetail.images || []
      });

      setNewImageFile(null);
      setSelectedImage(null);
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t ·∫£nh:', error);
      alert(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    } finally {
      setUploadingImage(false);
    }
  };

  // H√†m x·ª≠ l√Ω s·∫Øp x·∫øp l·∫°i th·ª© t·ª± hi·ªÉn th·ªã c·ªßa c√°c ·∫£nh v√† c·∫≠p nh·∫≠t ·∫£nh m·ªõi
  const handleReorderImages = async () => {
    try {
      // Ki·ªÉm tra xem reorderedImages c√≥ ph·∫£i l√† m·∫£ng kh√¥ng
      if (!reorderedImages || !Array.isArray(reorderedImages) || reorderedImages.length === 0) {
        console.error("reorderedImages kh√¥ng ph·∫£i l√† m·∫£ng ho·∫∑c r·ªóng:", reorderedImages);
        alert("Kh√¥ng th·ªÉ s·∫Øp x·∫øp l·∫°i ·∫£nh do d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        return;
      }
      
      setUploadingImage(true);
      
      // N·∫øu c√≥ ·∫£nh ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ c·∫≠p nh·∫≠t
      if (selectedImage && newImageFile) {
        const image = reorderedImages.find(img => img.imageID === selectedImage);
        if (image) {
          await productImageService.updateProductImage(selectedImage, newImageFile, image.displayOrder || 0);
          console.log("ƒê√£ c·∫≠p nh·∫≠t ·∫£nh:", selectedImage);
        }
      }
      
      // ƒê·∫£m b·∫£o reorderedImages c√≥ displayOrder t·ª´ 0 ƒë·∫øn length-1
      const sortedImages = [...reorderedImages].sort((a, b) => 
        (a.displayOrder === undefined ? 0 : a.displayOrder) - 
        (b.displayOrder === undefined ? 0 : b.displayOrder)
      );
      
      const updatedImages = sortedImages.map((img, index) => ({
        ...img,
        displayOrder: index
      }));

      // T√¨m ·∫£nh ƒë·∫°i di·ªán ƒë√£ ch·ªçn
      const mainImage = reorderedImages.find(img => img.isMainImage);
      if (mainImage) {
        try {
          // C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán cho s·∫£n ph·∫©m
          // ƒê·ªïi t·ª´ productService.updateMainImage sang productImageService.setMainImage
          console.log(`C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán, s·∫£n ph·∫©m ID: ${selectedProduct.ProductID}, ·∫£nh ID: ${mainImage.imageID}`);
          await productImageService.setMainImage(selectedProduct.ProductID, mainImage.imageID);
          console.log("ƒê√£ ƒë·∫∑t ·∫£nh ƒë·∫°i di·ªán:", mainImage.imageID);
        } catch (error) {
          console.error('L·ªói khi ƒë·∫∑t ·∫£nh ƒë·∫°i di·ªán:', error);
          // Ti·∫øp t·ª•c x·ª≠ l√Ω c√°c ph·∫ßn kh√°c, kh√¥ng d·ª´ng l·∫°i
        }
      }

      await productImageService.reorderProductImages(updatedImages);
      alert('C·∫≠p nh·∫≠t th√†nh c√¥ng');
      
      // ƒê√≥ng dialog ch·ªânh s·ª≠a ·∫£nh
      setOpenEditImagesDialog(false);
      setOpenImageGallery(false);
      
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o server ƒë√£ x·ª≠ l√Ω xong
      setTimeout(async () => {
        try {
          // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin s·∫£n ph·∫©m
          const productDetail = await productService.getProductById(selectedProduct.ProductID);
          
          // X·ª≠ l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m
          let images = [];
          if (productDetail.images && productDetail.images.length > 0) {
            images = productDetail.images;
          } else if (productDetail.imgURL) {
            images = [{ imgUrl: productDetail.imgURL }];
          } else if (selectedProduct.ImgURL) {
            images = [{ imgUrl: selectedProduct.ImgURL }];
          } else {
            images = [{ imgUrl: '/images/default-product.jpg' }];
          }
          
          // C·∫≠p nh·∫≠t state
          setProductImages(images);
          setSelectedProduct({
            ...selectedProduct,
            ImgURL: productDetail.imgURL || productDetail.ImgURL,
            images: images
          });
          
          // Reset c√°c state
          setNewImageFile(null);
          setSelectedImage(null);
        } catch (error) {
          console.error('L·ªói khi t·∫£i l·∫°i th√¥ng tin s·∫£n ph·∫©m:', error);
        }
      }, 1000);
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t ·∫£nh:', error);
      alert(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    } finally {
      setUploadingImage(false);
    }
  };

  // H√†m x·ª≠ l√Ω x√≥a ·∫£nh
  const handleDeleteImage = async (imageId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ·∫£nh n√†y?')) {
      try {
        setUploadingImage(true);
        await productImageService.deleteProductImage(imageId);
        alert('X√≥a ·∫£nh th√†nh c√¥ng');
        
        // ƒê√≥ng dialog ch·ªânh s·ª≠a ·∫£nh
        setOpenEditImagesDialog(false);
        setOpenImageGallery(false);
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o server ƒë√£ x·ª≠ l√Ω xong
        setTimeout(async () => {
          try {
            // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin s·∫£n ph·∫©m
            const productDetail = await productService.getProductById(selectedProduct.ProductID);
            
            // X·ª≠ l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m
            let images = [];
            if (productDetail.images && productDetail.images.length > 0) {
              images = productDetail.images;
            } else if (productDetail.imgURL) {
              images = [{ imgUrl: productDetail.imgURL }];
            } else if (selectedProduct.ImgURL) {
              images = [{ imgUrl: selectedProduct.ImgURL }];
            } else {
              images = [{ imgUrl: '/images/default-product.jpg' }];
            }
            
            // C·∫≠p nh·∫≠t state
            setProductImages(images);
            setSelectedProduct({
              ...selectedProduct,
              ImgURL: productDetail.imgURL || productDetail.ImgURL,
              images: images
            });
          } catch (error) {
            console.error('L·ªói khi t·∫£i l·∫°i th√¥ng tin s·∫£n ph·∫©m:', error);
          }
        }, 1000);
      } catch (error) {
        console.error('L·ªói khi x√≥a ·∫£nh:', error);
        alert(`Kh√¥ng th·ªÉ x√≥a ·∫£nh: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
      } finally {
        setUploadingImage(false);
      }
    }
  };

  // H√†m x·ª≠ l√Ω th√™m ·∫£nh m·ªõi
  const handleAddNewImage = async () => {
    if (!newImageFile) {
      alert('Vui l√≤ng ch·ªçn file ·∫£nh');
      return;
    }
    
    try {
      setUploadingImage(true);
      await productImageService.addProductImage(selectedProduct.ProductID, newImageFile);
      alert('Th√™m ·∫£nh th√†nh c√¥ng');
      
      // ƒê√≥ng dialog ch·ªânh s·ª≠a ·∫£nh
      setOpenEditImagesDialog(false);
      setOpenImageGallery(false);
      
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o server ƒë√£ x·ª≠ l√Ω xong
      setTimeout(async () => {
        try {
          // C·∫≠p nh·∫≠t l·∫°i th√¥ng tin s·∫£n ph·∫©m
          const productDetail = await productService.getProductById(selectedProduct.ProductID);
          
          // X·ª≠ l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m
          let images = [];
          if (productDetail.images && productDetail.images.length > 0) {
            images = productDetail.images;
          } else if (productDetail.imgURL) {
            images = [{ imgUrl: productDetail.imgURL }];
          } else if (selectedProduct.ImgURL) {
            images = [{ imgUrl: selectedProduct.ImgURL }];
          } else {
            images = [{ imgUrl: '/images/default-product.jpg' }];
          }
          
          // C·∫≠p nh·∫≠t state
          setProductImages(images);
          setSelectedProduct({
            ...selectedProduct,
            ImgURL: productDetail.imgURL || productDetail.ImgURL,
            images: images
          });
          
          setNewImageFile(null);
        } catch (error) {
          console.error('L·ªói khi t·∫£i l·∫°i th√¥ng tin s·∫£n ph·∫©m:', error);
        }
      }, 1000);
    } catch (error) {
      console.error('L·ªói khi th√™m ·∫£nh:', error);
      alert(`Kh√¥ng th·ªÉ th√™m ·∫£nh: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    } finally {
      setUploadingImage(false);
    }
  };

  // H√†m x·ª≠ l√Ω khi ƒë·∫∑t ·∫£nh l√†m ·∫£nh ƒë·∫°i di·ªán
  const handleSetAsMainImage = async (imageId) => {
    if (!reorderedImages || !Array.isArray(reorderedImages) || reorderedImages.length === 0) {
      console.error("reorderedImages kh√¥ng ph·∫£i l√† m·∫£ng ho·∫∑c r·ªóng:", reorderedImages);
      return;
    }

    console.log(`ƒê·∫∑t ·∫£nh ID ${imageId} l√†m ·∫£nh ƒë·∫°i di·ªán`);

    try {
      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán
      await productImageService.setMainImage(selectedProduct.ProductID, imageId);
      console.log(`ƒê√£ c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán ID ${imageId} tr√™n server`);

      // C·∫≠p nh·∫≠t state reorderedImages ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ m·ªôt ·∫£nh l√† ·∫£nh ƒë·∫°i di·ªán
      const updatedImages = reorderedImages.map(img => {
        const isMainImage = img.imageID === imageId;
        // Ghi log ƒë·ªÉ debug
        if (isMainImage) {
          console.log(`·∫¢nh ID ${img.imageID} ƒë∆∞·ª£c ƒë·∫∑t l√†m ·∫£nh ƒë·∫°i di·ªán`);
        } else if (img.isMainImage) {
          console.log(`·∫¢nh ID ${img.imageID} kh√¥ng c√≤n l√† ·∫£nh ƒë·∫°i di·ªán`);
        }
        // C·∫≠p nh·∫≠t c·∫£ isMainImage v√† displayOrder
        return {
          ...img,
          isMainImage: isMainImage,
          displayOrder: isMainImage ? 0 : (img.displayOrder === 0 ? 1 : img.displayOrder)
        };
      });

      console.log("Danh s√°ch ·∫£nh sau khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán:", updatedImages);
      setReorderedImages(updatedImages);
      alert('ƒê√£ ƒë·∫∑t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng');
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán:', error);
      alert(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán: ${error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    }
  };

  return (
    <Box sx={{ bgcolor: "#f0f0f0", minHeight: "100vh", width:'99vw' }}>
      <div className="manager-container">
        {/* Sidebar */}
        <div className="sidebar">
          <div className="logo-container">
            <div className="logo" style={{ marginRight: '15px', cursor: 'pointer' }} onClick={() => navigate('/')}>
              <img 
                src="/images/logo.png" 
                alt="Beauty Cosmetics"
                style={{
                  width: 60, 
                  height: 60, 
                  borderRadius: '50%',
                  objectFit: 'cover'
                }}
              />
            </div>
            <div className="brand" style={{ cursor: 'pointer' }} onClick={() => navigate('/')}>
              <div>BEAUTY</div>
              <div>COSMETICS</div>
            </div>
          </div>
          
          <div className="sidebar-title">MANAGER</div>
          
          <div className="sidebar-menu">
            {sidebarItems.map((item) => (
              <div key={item.id} className="sidebar-item" onClick={() => navigate(`/${item.id}`)}>
                <span className="sidebar-icon">{item.icon}</span>
                <span className="sidebar-text">{item.name}</span>
              </div>
            ))}
          </div>
          
          <div className="logout-button" onClick={() => navigate('/')}>
            <span className="logout-icon">üö™</span>
            <span>ƒêƒÉng Xu·∫•t</span>
          </div>
        </div>

        {/* Main Content */}
        <div className="main-content">
          {/* Header */}
          <div className="dashboard-header">
            <div className="search-bar" style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m, m√£ s·∫£n ph·∫©m, th∆∞∆°ng hi·ªáu..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 15px',
                  borderRadius: '5px',
                  border: '1px solid #ddd',
                  fontSize: '14px',
                  color: '#000000',
                  backgroundColor: '#ffffff',
                  outline: 'none',
                  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
                }}
              />
              {searchTerm && (
                <button
                  onClick={handleClear}
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  X√≥a
                </button>
              )}
            </div>
          </div>
          
          {/* Dashboard Title and Actions */}
          <div className="dashboard-title-bar">
            <h1>S·∫£n Ph·∫©m</h1>
            <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
              {searchTerm && products.length > 0 && (
                <div style={{ color: '#666', fontSize: '14px', alignSelf: 'center' }}>
                  T√¨m th·∫•y: {products.length} s·∫£n ph·∫©m
                </div>
              )}
               <button className="btn-filter" onClick={handleFilterClick}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
                  <FaFilter /> 
                  <span>L·ªçc</span>
                  {filteredCount > 0 && <span className="notification">{filteredCount}</span>}
                </div>
              </button>
              {filteredCount > 0 && (
                <button
                  onClick={handleClearFilters}
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  X√≥a b·ªô l·ªçc
                </button>
              )}
              <button
                onClick={handleAdd}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#28a745',
                  color: 'white',
                  border: 'none',
                  borderRadius: '5px',
                  cursor: 'pointer',
                  fontSize: '14px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '5px'
                }}
              >
                + Th√™m s·∫£n ph·∫©m
              </button>
             
            </div>
          </div>
          
          {/* Tabs */}
          <div className="dashboard-tabs">
            {tabs.map((tab) => (
              <div 
                key={tab}
                className={`tab ${activeTab === tab ? 'active' : ''}`}
                onClick={() => setActiveTab(tab)}
              >
                {tab}
              </div>
            ))}
          </div>
          
          {/* Table */}
          <div className="dashboard-table" style={{ overflowX: 'auto' }}>
            <table style={{ 
              tableLayout: 'fixed', 
              width: '100%', 
              borderCollapse: 'separate', 
              borderSpacing: '0',
              border: '1px solid #e0e0e0',
              borderRadius: '8px',
              overflow: 'hidden',
              boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)'
            }}>
              <thead>
                <tr style={{ backgroundColor: '#f8f9fa', height: '50px' }}>
                  <th style={{ width: '50px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>ID</th>
                  <th style={{ width: '80px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>M√É SP</th>
                  <th style={{ width: '100px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>PH√ÇN LO·∫†I</th>
                  <th style={{ width: '120px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>T√äN SP</th>
                  <th style={{ width: '60px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>SL</th>
                  <th style={{ width: '70px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>DUNG T√çCH</th>
                  <th style={{ width: '80px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>GI√Å</th>
                  <th style={{ width: '90px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>TH∆Ø∆†NG HI·ªÜU</th>
                  <th style={{ width: '80px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>TR·∫†NG TH√ÅI</th>
                  <th style={{ width: '150px', padding: '8px 4px', borderBottom: '2px solid #dee2e6', fontWeight: 'bold', color: '#495057', textAlign: 'center' }}>THAO T√ÅC</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td 
                      colSpan="10" 
                      style={{ 
                        padding: '30px', 
                        textAlign: 'center', 
                        color: '#6c757d', 
                        fontSize: '16px',
                        backgroundColor: '#f8f9fa',
                        borderBottom: '1px solid #dee2e6'
                      }}
                    >
                      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: '10px' }}>
                        <CircularProgress size={24} />
                        <span>ƒêang t·∫£i d·ªØ li·ªáu...</span>
                      </div>
                    </td>
                  </tr>
                ) : error ? (
                  <tr>
                    <td 
                      colSpan="10" 
                      style={{ 
                        padding: '30px', 
                        textAlign: 'center', 
                        color: '#dc3545', 
                        fontSize: '16px',
                        backgroundColor: '#f8f9fa',
                        borderBottom: '1px solid #dee2e6'
                      }}
                    >
                      {error}
                    </td>
                  </tr>
                ) : displayedProducts.length > 0 ? (
                  displayedProducts.map((product, index) => (
                    <tr 
                      key={product.ProductID} 
                      style={{ 
                        backgroundColor: index % 2 === 0 ? '#ffffff' : '#f8f9fa',
                        transition: 'all 0.2s',
                        ':hover': { backgroundColor: '#f1f3f5' }
                      }}
                    >
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.ProductID}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.ProductCode}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'left' }}>{product.categoryDisplay}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'left', fontWeight: '500' }}>{product.ProductName}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.Quantity}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.Capacity}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.Price ? `${product.Price.toLocaleString()}ƒë` : ''}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.Brand}</td>
                      <td style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', fontSize: '13px', textAlign: 'center' }}>{product.Status}</td>
                      <td style={{ whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis', maxHeight: '100px', padding: '8px 4px', borderBottom: '1px solid #dee2e6', textAlign: 'center' }}>
                        <button
                          onClick={() => handleViewDetail(product)}
                          style={{
                            padding: '4px 8px',
                            backgroundColor: '#17a2b8',
                            color: 'white',
                            border: 'none',
                            borderRadius: '3px',
                            cursor: 'pointer',
                            marginRight: '4px',
                            fontSize: '12px',
                            transition: 'background-color 0.2s',
                            ':hover': { backgroundColor: '#138496' }
                          }}
                        >
                          Chi ti·∫øt
                        </button>
                        <button
                          onClick={() => handleDelete(product.ProductID)}
                          style={{
                            padding: '4px 8px',
                            backgroundColor: '#dc3545',
                            color: 'white',
                            border: 'none',
                            borderRadius: '3px',
                            cursor: 'pointer',
                            fontSize: '12px',
                            transition: 'background-color 0.2s',
                            ':hover': { backgroundColor: '#c82333' }
                          }}
                        >
                          ƒê·ªïi tr·∫°ng th√°i
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td 
                      colSpan="10" 
                      className="empty-data-message"
                      style={{ 
                        padding: '30px', 
                        textAlign: 'center', 
                        color: '#6c757d', 
                        fontSize: '16px',
                        fontStyle: 'italic',
                        backgroundColor: '#f8f9fa',
                        borderBottom: '1px solid #dee2e6'
                      }}
                    >
                      Kh√¥ng c√≥ d·ªØ li·ªáu
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
            
            {/* Ph√¢n trang */}
            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
              <Pagination
                count={Math.ceil(products.length / pageSize)}
                page={page}
                onChange={handlePageChange}
                color="primary"
                size="large"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Dialog l·ªçc s·∫£n ph·∫©m */}
      <Dialog open={openFilterDialog} onClose={() => setOpenFilterDialog(false)}>
        <DialogTitle>L·ªçc s·∫£n ph·∫©m</DialogTitle>
        <DialogContent>
          <Select
            value={selectedCategory}
            onChange={handleCategoryChange}
            displayEmpty
            fullWidth
            style={{ marginBottom: '10px', marginTop: '10px' }}
          >
            <MenuItem value=""><em>Danh m·ª•c s·∫£n ph·∫©m</em></MenuItem>
            {categoryOptions.map((category) => (
              <MenuItem key={category.id} value={category.id}>
                {category.display}
              </MenuItem>
            ))}
          </Select>
          <Select
            value={selectedSkinType}
            onChange={handleSkinTypeChange}
            displayEmpty
            fullWidth
            style={{ marginTop: '10px' }}
          >
            <MenuItem value=""><em>Lo·∫°i da</em></MenuItem>
            {skinTypes.map((skinType, index) => (
              <MenuItem key={index} value={skinType}>{skinType}</MenuItem>
            ))}
          </Select>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenFilterDialog(false)}>H·ªßy</Button>
          <Button onClick={handleFilterApply} color="primary">√Åp d·ª•ng</Button>
        </DialogActions>
      </Dialog>

      {/* Dialog chi ti·∫øt s·∫£n ph·∫©m */}
      <Dialog open={openDetailDialog} onClose={handleCloseDetail} maxWidth="md" fullWidth>
        {selectedProduct && (
          <>
            <DialogTitle>
              Chi ti·∫øt s·∫£n ph·∫©m: {selectedProduct.ProductName}
            </DialogTitle>
            <DialogContent>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginTop: '10px' }}>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                  <div>
                    <strong>ID:</strong> {selectedProduct.ProductID}
                  </div>
                  <div>
                    <strong>M√£ s·∫£n ph·∫©m:</strong> {selectedProduct.ProductCode}
                  </div>
                  <div>
                    <strong>T√™n s·∫£n ph·∫©m:</strong> {selectedProduct.ProductName}
                  </div>
                  <div>
                    <strong>Danh m·ª•c:</strong> {selectedProduct.categoryDisplay}
                  </div>
                  <div>
                    <strong>S·ªë l∆∞·ª£ng:</strong> {selectedProduct.Quantity}
                  </div>
                  <div>
                    <strong>Dung t√≠ch:</strong> {selectedProduct.Capacity}
                  </div>
                  <div>
                    <strong>Gi√°:</strong> {selectedProduct.Price ? `${selectedProduct.Price.toLocaleString()}ƒë` : ''}
                  </div>
                </div>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                  <div>
                    <strong>Th∆∞∆°ng hi·ªáu:</strong> {selectedProduct.Brand}
                  </div>
                  <div>
                    <strong>Xu·∫•t x·ª©:</strong> {selectedProduct.Origin}
                  </div>
                  <div>
                    <strong>Tr·∫°ng th√°i:</strong> {selectedProduct.Status}
                  </div>
                  <div>
                    <strong>H√¨nh ·∫£nh:</strong>
                    <div style={{ marginTop: '8px' }}>
                      <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                        {productImages && productImages.length > 0 ? (
                          productImages.slice(0, 4).map((image, index) => (
                            <div key={index} style={{ width: '60px', height: '60px', border: '1px solid #ddd', borderRadius: '4px', overflow: 'hidden' }}>
                              <img
                                src={getImageUrl(image)}
                                alt={`${selectedProduct.ProductName} - ·∫¢nh ${index + 1}`}
                                style={{
                                  width: '100%',
                                  height: '100%',
                                  objectFit: 'cover'
                                }}
                                onError={(e) => {
                                  e.target.onerror = null;
                                  e.target.src = '/images/default-product.png';
                                }}
                              />
                            </div>
                          ))
                        ) : (
                          <div style={{ padding: '10px', color: '#6c757d', fontStyle: 'italic' }}>
                            Kh√¥ng c√≥ ·∫£nh
                          </div>
                        )}
                        {productImages && productImages.length > 4 && (
                          <div style={{ 
                            width: '60px', 
                            height: '60px', 
                            border: '1px solid #ddd', 
                            borderRadius: '4px', 
                            display: 'flex', 
                            alignItems: 'center', 
                            justifyContent: 'center',
                            backgroundColor: 'rgba(0,0,0,0.1)',
                            fontSize: '12px',
                            fontWeight: 'bold'
                          }}>
                            +{productImages.length - 4}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                  <div>
                    <strong>Lo·∫°i da:</strong> {selectedProduct.SkinType}
                  </div>
                  <div>
                    <strong>Ng√†y s·∫£n xu·∫•t:</strong> {selectedProduct.ManufactureDate}
                  </div>
                  <div>
                    <strong>Ng√†y nh·∫≠p kho:</strong> {selectedProduct.ngayNhapKho}
                  </div>
                </div>
              </div>
              <div style={{ marginTop: '20px' }}>
                <div style={{ marginBottom: '16px' }}>
                  <strong>M√¥ t·∫£ s·∫£n ph·∫©m:</strong>
                  <div style={{ 
                    padding: '8px', 
                    backgroundColor: '#f8f9fa', 
                    borderRadius: '4px', 
                    marginTop: '4px',
                    minHeight: '60px'
                  }}>
                    {selectedProduct.Description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                  </div>
                </div>
                <div style={{ marginBottom: '16px' }}>
                  <strong>Th√†nh ph·∫ßn:</strong>
                  <div style={{ 
                    padding: '8px', 
                    backgroundColor: '#f8f9fa', 
                    borderRadius: '4px', 
                    marginTop: '4px',
                    minHeight: '60px'
                  }}>
                    {selectedProduct.Ingredients || 'Kh√¥ng c√≥ th√¥ng tin th√†nh ph·∫ßn'}
                  </div>
                </div>
                <div>
                  <strong>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</strong>
                  <div style={{ 
                    padding: '8px', 
                    backgroundColor: '#f8f9fa', 
                    borderRadius: '4px', 
                    marginTop: '4px',
                    minHeight: '60px'
                  }}>
                    {selectedProduct.UsageInstructions || 'Kh√¥ng c√≥ h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng'}
                  </div>
                </div>
              </div>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleCloseDetail} color="primary">
                ƒê√≥ng
              </Button>
              <Button 
                onClick={() => {
                  // M·ªü dialog xem t·∫•t c·∫£ ·∫£nh
                  setOpenImageGallery(true);
                }}
                color="info"
                style={{ marginRight: '8px' }}
              >
                Xem t·∫•t c·∫£ ·∫£nh
              </Button>
              <Button 
                onClick={() => {
                  handleCloseDetail();
                  handleEdit(selectedProduct.ProductID);
                }} 
                color="primary" 
                variant="contained"
              >
                Ch·ªânh s·ª≠a
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>

      {/* Dialog th√™m s·∫£n ph·∫©m */}
      <Dialog open={openAddDialog} onClose={handleDialogClose} maxWidth="md" fullWidth>
        <DialogTitle>{editingProductId ? 'Ch·ªânh S·ª≠a S·∫£n Ph·∫©m' : 'Th√™m S·∫£n Ph·∫©m M·ªõi'}</DialogTitle>
        <DialogContent>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px', marginTop: '10px' }}>
            <TextField
              margin="dense"
              name="productName"
              label="T√™n S·∫£n Ph·∫©m *"
              type="text"
              fullWidth
              variant="outlined"
              value={newProduct.productName}
              onChange={handleInputChange}
              required
              error={!newProduct.productName}
              helperText={!newProduct.productName ? "T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc" : ""}
            />
            <TextField
              margin="dense"
              name="productCode"
              label="M√£ S·∫£n Ph·∫©m"
              type="text"
              fullWidth
              variant="outlined"
              value={newProduct.productCode}
              onChange={handleInputChange}
              disabled={!!editingProductId}
              helperText={editingProductId ? "M√£ s·∫£n ph·∫©m kh√¥ng th·ªÉ thay ƒë·ªïi" : ""}
            />
            <Select
              name="categoryId"
              displayEmpty
              fullWidth
              value={newProduct.categoryId}
              onChange={handleInputChange}
              label="Danh M·ª•c *"
            >
              <MenuItem value=""><em>Ch·ªçn danh m·ª•c</em></MenuItem>
              {categoryOptions.map((category) => (
                <MenuItem key={category.display} value={category.id}>
                  {category.display}
                </MenuItem>
              ))}
            </Select>
            <TextField
              margin="dense"
              name="quantity"
              label="S·ªë L∆∞·ª£ng *"
              type="number"
              fullWidth
              variant="outlined"
              value={newProduct.quantity}
              onChange={handleInputChange}
            />
            <TextField
              margin="dense"
              name="price"
              label="Gi√° Ti·ªÅn *"
              type="number"
              fullWidth
              variant="outlined"
              value={newProduct.price}
              onChange={handleInputChange}
            />
            <TextField
              margin="dense"
              name="capacity"
              label="Dung T√≠ch"
              type="text"
              fullWidth
              variant="outlined"
              value={newProduct.capacity}
              onChange={handleInputChange}
            />
            <TextField
              margin="dense"
              name="brand"
              label="Th∆∞∆°ng Hi·ªáu"
              type="text"
              fullWidth
              variant="outlined"
              value={newProduct.brand}
              onChange={handleInputChange}
            />
            <TextField
              margin="dense"
              name="origin"
              label="Xu·∫•t X·ª©"
              type="text"
              fullWidth
              variant="outlined"
              value={newProduct.origin}
              onChange={handleInputChange}
            />
            <Select
              name="skinType"
              displayEmpty
              fullWidth
              value={newProduct.skinType}
              onChange={handleInputChange}
              label="Lo·∫°i Da"
            >
              <MenuItem value=""><em>Ch·ªçn lo·∫°i da</em></MenuItem>
              {skinTypes.map((skinType, index) => (
                <MenuItem key={index} value={skinType}>{skinType}</MenuItem>
              ))}
            </Select>
            <Select
              name="status"
              displayEmpty
              fullWidth
              value={newProduct.status || 'Available'}
              onChange={handleInputChange}
              label="Tr·∫°ng Th√°i *"
              style={{ marginTop: '16px' }}
            >
              <MenuItem value="Available">Available</MenuItem>
              <MenuItem value="Unavailable">Unavailable</MenuItem>
              <MenuItem value="OutOfStock">Out of Stock</MenuItem>
            </Select>
          </div>
          
          <div style={{ marginTop: '15px' }}>
            <TextField
              margin="dense"
              name="description"
              label="M√¥ T·∫£ S·∫£n Ph·∫©m"
              multiline
              rows={3}
              fullWidth
              variant="outlined"
              value={newProduct.description}
              onChange={handleInputChange}
            />
            <TextField
              margin="dense"
              name="ingredients"
              label="Th√†nh Ph·∫ßn"
              multiline
              rows={3}
              fullWidth
              variant="outlined"
              value={newProduct.ingredients}
              onChange={handleInputChange}
            />
            <TextField
              margin="dense"
              name="usageInstructions"
              label="H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng"
              multiline
              rows={3}
              fullWidth
              variant="outlined"
              value={newProduct.usageInstructions}
              onChange={handleInputChange}
            />
          </div>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDialogClose} color="primary">
            H·ªßy
          </Button>
          <Button 
            onClick={editingProductId ? handleSubmitEdit : handleSubmitProduct} 
            color="primary" 
            variant="contained"
          >
            {editingProductId ? 'C·∫≠p nh·∫≠t' : 'Th√™m S·∫£n Ph·∫©m'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Dialog xem t·∫•t c·∫£ ·∫£nh */}
      <Dialog open={openImageGallery} onClose={() => setOpenImageGallery(false)} maxWidth="md" fullWidth>
        {selectedProduct && (
          <>
            <DialogTitle>
              Th∆∞ vi·ªán ·∫£nh: {selectedProduct.ProductName}
            </DialogTitle>
            <DialogContent>
              <Box sx={{ display: 'flex' }}>
                {/* Thumbnail images */}
                <Box sx={{ width: '20%', mr: 2 }}>
                  {productImages && productImages.length > 0 ? (
                    productImages.map((image, index) => (
                      <Box 
                        key={index} 
                        sx={{ 
                          mb: 1, 
                          border: selectedImageIndex === index ? '2px solid #1976d2' : '1px solid #eee',
                          p: 1,
                          cursor: 'pointer'
                        }}
                        onClick={() => setSelectedImageIndex(index)}
                      >
                        <img
                          src={getImageUrl(image)}
                          alt={`Thumbnail ${index + 1}`}
                          style={{ width: '100%', height: '80px', objectFit: 'cover' }}
                          onError={(e) => {
                            e.target.onerror = null;
                            e.target.src = '/images/default-product.png';
                          }}
                        />
                      </Box>
                    ))
                  ) : (
                    <Box 
                      sx={{ 
                        mb: 1, 
                        border: '1px solid #eee',
                        p: 1
                      }}
                    >
                      <Box 
                        sx={{ 
                          bgcolor: '#f5f5f5', 
                          height: 80, 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'center' 
                        }}
                      >
                        <Typography variant="caption" color="text.secondary">
                          Kh√¥ng c√≥ ·∫£nh
                        </Typography>
                      </Box>
                    </Box>
                  )}
                </Box>
                
                {/* Main image */}
                <Box sx={{ width: '80%' }}>
                  {productImages && productImages.length > 0 ? (
                    <Box
                      sx={{
                        height: 400,
                        width: '100%',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        border: '1px solid #eee',
                        overflow: 'hidden',
                        position: 'relative'
                      }}
                    >
                      {productImages[selectedImageIndex] && 
                        productImages[selectedImageIndex].imgUrl === (selectedProduct.ImgURL || selectedProduct.imgURL) && (
                        <div style={{
                          position: 'absolute',
                          top: '0',
                          right: '0',
                          backgroundColor: '#4CAF50',
                          color: 'white',
                          padding: '4px 8px',
                          fontSize: '12px',
                          borderRadius: '0 0 0 4px',
                          zIndex: 1
                        }}>
                          ·∫¢nh ƒë·∫°i di·ªán
                        </div>
                      )}
                      <img
                        src={getImageUrl(productImages[selectedImageIndex])}
                        alt={selectedProduct.ProductName}
                        style={{ 
                          maxWidth: '100%', 
                          maxHeight: '100%', 
                          objectFit: 'contain' 
                        }}
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src = '/images/default-product.png';
                        }}
                      />
                    </Box>
                  ) : (
                    <Box 
                      sx={{ 
                        bgcolor: '#f5f5f5', 
                        height: 400, 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'center',
                        border: '1px solid #eee'
                      }}
                    >
                      <Typography variant="h6" color="text.secondary">
                        Kh√¥ng c√≥ ·∫£nh
                      </Typography>
                    </Box>
                  )}
                  
                  {/* Image info */}
                  {productImages && productImages.length > 0 && productImages[selectedImageIndex] && (
                    <Box sx={{ mt: 2, p: 1, bgcolor: '#f8f8f8' }}>
                      <Typography variant="body2">
                        <strong>Th·ª© t·ª± hi·ªÉn th·ªã:</strong> {productImages[selectedImageIndex].displayOrder !== undefined ? 
                          productImages[selectedImageIndex].displayOrder : 'Ch∆∞a ƒë·∫∑t th·ª© t·ª±'}
                      </Typography>
                      <Typography variant="body2" sx={{ mt: 1 }}>
                        <strong>ID ·∫£nh:</strong> {productImages[selectedImageIndex].imageID || 'Kh√¥ng c√≥ th√¥ng tin'}
                      </Typography>
                    </Box>
                  )}
                </Box>
              </Box>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setOpenImageGallery(false)} color="primary">
                ƒê√≥ng
              </Button>
              <Button 
                onClick={handleOpenEditImages} 
                color="primary" 
                variant="contained"
              >
                S·ª≠a ·∫£nh
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>

      {/* Dialog s·ª≠a ·∫£nh */}
      <Dialog open={openEditImagesDialog} onClose={() => setOpenEditImagesDialog(false)} maxWidth="md" fullWidth>
        {selectedProduct && (
          <>
            <DialogTitle>
              Ch·ªânh s·ª≠a ·∫£nh: {selectedProduct.ProductName}
            </DialogTitle>
            <DialogContent>
              {uploadingImage ? (
                <div style={{ display: 'flex', justifyContent: 'center', padding: '30px' }}>
                  <CircularProgress />
                  <span style={{ marginLeft: '10px' }}>ƒêang x·ª≠ l√Ω...</span>
                </div>
              ) : (
                <>
                  {/* Ph·∫ßn th√™m ·∫£nh m·ªõi */}
                  <div style={{ 
                    marginBottom: '20px', 
                    padding: '16px', 
                    border: '1px dashed #ccc', 
                    borderRadius: '4px',
                    opacity: reorderedImages.length >= 5 ? 0.6 : 1
                  }}>
                    <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>
                      Th√™m ·∫£nh m·ªõi {reorderedImages.length >= 5 && "(ƒê√£ ƒë·∫°t gi·ªõi h·∫°n 5 ·∫£nh)"}
                    </div>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                      <Button
                        variant="outlined"
                        component="label"
                        disabled={reorderedImages.length >= 5}
                      >
                        Ch·ªçn ·∫£nh
                        <input
                          type="file"
                          hidden
                          accept="image/*"
                          onChange={handleImageFileChange}
                          onClick={() => setSelectedImage(null)}
                          disabled={reorderedImages.length >= 5}
                        />
                      </Button>
                      <span style={{ flex: 1 }}>
                        {newImageFile ? newImageFile.name : 'Ch∆∞a ch·ªçn file n√†o'}
                      </span>
                      <Button
                        variant="contained"
                        color="primary"
                        onClick={handleAddNewImage}
                        disabled={!newImageFile || selectedImage !== null || reorderedImages.length >= 5}
                      >
                        Th√™m ·∫£nh
                      </Button>
                    </div>
                  </div>

                  {/* Hi·ªÉn th·ªã danh s√°ch ·∫£nh ƒë·ªÉ s·ª≠a - B·ªë c·ª•c m·ªõi */}
                  <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>Danh s√°ch ·∫£nh ({reorderedImages.length}/5)</div>
                  
                  <Box sx={{ display: 'flex', gap: 2 }}>
                    {/* Ph·∫ßn thumbnails */}
                    <Box sx={{ width: '25%' }}>
                      {reorderedImages && reorderedImages.length > 0 ? (
                        reorderedImages.map((image, index) => (
                          <Box 
                            key={index} 
                            sx={{ 
                              mb: 1, 
                              border: selectedImage === image.imageID ? '2px solid #1976d2' : image.isMainImage ? '2px solid #4CAF50' : '1px solid #ddd',
                              p: 1,
                              cursor: 'pointer',
                              position: 'relative',
                              borderRadius: '4px'
                            }}
                            onClick={() => setSelectedImage(image.imageID)}
                          >
                            {image.isMainImage && (
                              <div style={{
                                position: 'absolute',
                                top: '0',
                                right: '0',
                                backgroundColor: '#4CAF50',
                                color: 'white',
                                padding: '2px 6px',
                                fontSize: '10px',
                                borderRadius: '0 0 0 4px',
                                zIndex: 1
                              }}>
                                ·∫¢nh ƒë·∫°i di·ªán
                              </div>
                            )}
                            <img
                              src={getImageUrl(image)}
                              alt={`Thumbnail ${index + 1}`}
                              style={{ 
                                width: '100%', 
                                height: '80px', 
                                objectFit: 'cover' 
                              }}
                              onError={(e) => {
                                e.target.onerror = null;
                                e.target.src = '/images/default-product.png';
                              }}
                            />
                            <Typography variant="caption" display="block" sx={{ mt: 0.5, textAlign: 'center' }}>
                              Th·ª© t·ª±: {image.displayOrder !== undefined ? image.displayOrder : index}
                            </Typography>
                          </Box>
                        ))
                      ) : (
                        <Box 
                          sx={{ 
                            p: 2, 
                            border: '1px solid #ddd', 
                            borderRadius: '4px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                          }}
                        >
                          <Typography variant="body2" color="text.secondary">
                            Kh√¥ng c√≥ ·∫£nh
                          </Typography>
                        </Box>
                      )}
                    </Box>

                    {/* Ph·∫ßn hi·ªÉn th·ªã ·∫£nh ƒëang ch·ªçn v√† c√°c t√πy ch·ªânh */}
                    <Box sx={{ width: '75%' }}>
                      {reorderedImages && reorderedImages.length > 0 ? (
                        <>
                          {selectedImage ? (
                            // Hi·ªÉn th·ªã ·∫£nh ƒëang ƒë∆∞·ª£c ch·ªçn
                            <>
                              {(() => {
                                const selectedImageObj = reorderedImages.find(img => img.imageID === selectedImage);
                                return selectedImageObj ? (
                                  <Box>
                                    <Box 
                                      sx={{ 
                                        height: '250px', 
                                        border: selectedImageObj.isMainImage ? '2px solid #4CAF50' : '1px solid #ddd',
                                        borderRadius: '4px',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        position: 'relative',
                                        mb: 2,
                                        p: 1
                                      }}
                                    >
                                      {selectedImageObj.isMainImage && (
                                        <div style={{
                                          position: 'absolute',
                                          top: '0',
                                          right: '0',
                                          backgroundColor: '#4CAF50',
                                          color: 'white',
                                          padding: '4px 8px',
                                          fontSize: '12px',
                                          borderRadius: '0 0 0 4px',
                                          zIndex: 1
                                        }}>
                                          ·∫¢nh ƒë·∫°i di·ªán
                                        </div>
                                      )}
                                      <img
                                        src={getImageUrl(selectedImageObj)}
                                        alt="·∫¢nh ƒëang ch·ªânh s·ª≠a"
                                        style={{ 
                                          maxWidth: '100%', 
                                          maxHeight: '100%', 
                                          objectFit: 'contain' 
                                        }}
                                        onError={(e) => {
                                          e.target.onerror = null;
                                          e.target.src = '/images/default-product.png';
                                        }}
                                      />
                                    </Box>

                                    {/* C√°c t√πy ch·ªânh cho ·∫£nh ƒë√£ ch·ªçn */}
                                    <Box sx={{ p: 2, bgcolor: '#f8f9fa', borderRadius: '4px' }}>
                                      <Typography variant="body1" fontWeight="bold" gutterBottom>
                                        Th√¥ng tin ·∫£nh
                                      </Typography>
                                      
                                      <Box sx={{ mb: 2 }}>
                                        <Typography variant="body2" gutterBottom>
                                          <strong>ID ·∫£nh:</strong> {selectedImageObj.imageID}
                                        </Typography>
                                        <TextField
                                          type="number"
                                          label="Th·ª© t·ª± hi·ªÉn th·ªã"
                                          value={selectedImageObj.displayOrder || reorderedImages.indexOf(selectedImageObj)}
                                          onChange={(e) => {
                                            const newDisplayOrder = parseInt(e.target.value);
                                            const newImages = [...reorderedImages];
                                            const imageIndex = newImages.findIndex(img => img.imageID === selectedImage);
                                            
                                            if (imageIndex !== -1) {
                                              // Ki·ªÉm tra xem ƒë√£ c√≥ ·∫£nh n√†o c√≥ th·ª© t·ª± hi·ªÉn th·ªã n√†y ch∆∞a
                                              const existingImageWithOrder = newImages.find(
                                                (img, idx) => idx !== imageIndex && img.displayOrder === newDisplayOrder
                                              );

                                              if (existingImageWithOrder) {
                                                // N·∫øu c√≥, ho√°n ƒë·ªïi th·ª© t·ª± hi·ªÉn th·ªã gi·ªØa hai ·∫£nh
                                                existingImageWithOrder.displayOrder = newImages[imageIndex].displayOrder;
                                              }
                                              
                                              // C·∫≠p nh·∫≠t th·ª© t·ª± hi·ªÉn th·ªã cho ·∫£nh hi·ªán t·∫°i
                                              newImages[imageIndex].displayOrder = newDisplayOrder;
                                              setReorderedImages(newImages);
                                            }
                                          }}
                                          fullWidth
                                          size="small"
                                          margin="normal"
                                          InputProps={{ inputProps: { min: 0, max: 4 } }}
                                        />
                                      </Box>
                                      
                                      <Box sx={{ mb: 2 }}>
                                        <Typography variant="body2" gutterBottom>
                                          Thay ƒë·ªïi ·∫£nh:
                                        </Typography>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                          <Button
                                            variant="outlined"
                                            component="label"
                                            size="small"
                                          >
                                            Ch·ªçn ·∫£nh m·ªõi
                                            <input
                                              type="file"
                                              hidden
                                              accept="image/*"
                                              onChange={handleImageFileChange}
                                            />
                                          </Button>
                                          <Typography variant="caption" sx={{ flex: 1, ml: 1 }}>
                                            {newImageFile ? newImageFile.name : 'Ch∆∞a ch·ªçn file n√†o'}
                                          </Typography>
                                        </Box>
                                        {newImageFile && (
                                          <Box 
                                            sx={{ 
                                              mt: 1, 
                                              p: 1, 
                                              bgcolor: '#e8f5e9', 
                                              borderRadius: '4px',
                                              fontSize: '12px'
                                            }}
                                          >
                                            <Typography variant="caption">
                                              ƒê√£ ch·ªçn: {newImageFile.name}
                                            </Typography>
                                          </Box>
                                        )}
                                      </Box>
                                      
                                      <Box sx={{ display: 'flex', gap: 1 }}>
                                        <Button
                                          variant="outlined"
                                          size="small"
                                          color="success"
                                          onClick={() => handleSetAsMainImage(selectedImage)}
                                          disabled={selectedImageObj.isMainImage}
                                          fullWidth
                                        >
                                          {selectedImageObj.isMainImage ? '·∫¢nh ƒë·∫°i di·ªán' : 'ƒê·∫∑t l√†m ·∫£nh ƒë·∫°i di·ªán'}
                                        </Button>
                                        <Button
                                          variant="contained"
                                          color="error"
                                          size="small"
                                          onClick={() => handleDeleteImage(selectedImage)}
                                          fullWidth
                                        >
                                          X√≥a ·∫£nh n√†y
                                        </Button>
                                      </Box>
                                    </Box>
                                  </Box>
                                ) : (
                                  <Box 
                                    sx={{ 
                                      height: '250px', 
                                      border: '1px solid #ddd',
                                      borderRadius: '4px',
                                      display: 'flex',
                                      alignItems: 'center',
                                      justifyContent: 'center'
                                    }}
                                  >
                                    <Typography variant="body1" color="text.secondary">
                                      Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë√£ ch·ªçn
                                    </Typography>
                                  </Box>
                                );
                              })()}
                            </>
                          ) : (
                            // Hi·ªÉn th·ªã th√¥ng b√°o ch·ªçn ·∫£nh
                            <Box 
                              sx={{ 
                                height: '250px', 
                                border: '1px solid #ddd',
                                borderRadius: '4px',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                flexDirection: 'column',
                                mb: 2
                              }}
                            >
                              <Typography variant="body1" gutterBottom>
                                H√£y ch·ªçn m·ªôt ·∫£nh t·ª´ danh s√°ch b√™n tr√°i ƒë·ªÉ ch·ªânh s·ª≠a
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                Ho·∫∑c th√™m ·∫£nh m·ªõi b·∫±ng form ph√≠a tr√™n
                              </Typography>
                            </Box>
                          )}
                        </>
                      ) : (
                        <Box 
                          sx={{ 
                            height: '250px', 
                            border: '1px solid #ddd',
                            borderRadius: '4px',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                          }}
                        >
                          <Typography variant="body1" color="text.secondary">
                            Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ hi·ªÉn th·ªã
                          </Typography>
                        </Box>
                      )}
                    </Box>
                  </Box>
                </>
              )}
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setOpenEditImagesDialog(false)} color="primary">
                ƒê√≥ng
              </Button>
              <Button 
                onClick={handleReorderImages} 
                color="primary" 
                variant="contained"
                disabled={uploadingImage}
              >
                C·∫≠p nh·∫≠t
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default Product;
