import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaPlus } from 'react-icons/fa';
import { Box, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, FormControlLabel, Checkbox, Select, MenuItem } from '@mui/material';
import userService from '../../apis/userService'; // Import userService
import adminService from '../../apis/adminService'; // Import adminService
import './Manager.css';

const Staff = () => {
  const [activeItem, setActiveItem] = useState('');
  const [staff, setStaff] = useState([]); 
  const [loading, setLoading] = useState(true); 
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState(''); // State ƒë·ªÉ l∆∞u tr·ªØ gi√° tr·ªã t√¨m ki·∫øm
  const navigate = useNavigate();
  const [openDialog, setOpenDialog] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [currentStaff, setCurrentStaff] = useState(null);
  const [newStaff, setNewStaff] = useState({ 
    username: '', 
    email: '', 
    password: '' 
  });
  const [showPassword, setShowPassword] = useState(false);

  const sidebarItems = [
    { id: 'revenue', name: 'Doanh thu', icon: 'üìä' },
    { id: 'staff', name: 'Nh√¢n vi√™n', icon: 'üë§' },
    { id: 'viewOrder', name: 'ƒê∆°n h√†ng', icon: 'üìã' },
    { id: 'product', name: 'S·∫£n ph·∫©m', icon: 'üì¶' },
    { id: 'viewCustomer', name: 'H·ªì s∆° kh√°ch h√†ng', icon: 'üìù' },
    { id: 'viewSupport', name: 'ƒê∆°n h·ªó tr·ª£', icon: 'üì´' },
    { id: 'voucher', name: 'Vouchers', icon: 'üé´' },
    { id: 'feedback', name: 'Feedback', icon: 'üì¢' },
    { id: 'blogManager', name: 'Blog', icon: 'üì∞' }
  ];

  useEffect(() => {
    const fetchStaff = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng
        const data = await userService.getAllUsers();
        console.log('Data returned from getAllUsers:', data);
        
        if (Array.isArray(data) && data.length > 0) {
          // L·ªçc danh s√°ch ƒë·ªÉ ch·ªâ l·∫•y nh·ªØng ng∆∞·ªùi c√≥ vai tr√≤ l√† "Staff"
          let staffMembers = data.filter(member => {
            // Ki·ªÉm tra vai tr√≤ c·ªßa th√†nh vi√™n, x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng
            const memberRole = member?.role?.toLowerCase() || '';
            return memberRole === 'staff';
          });
          
          console.log('S·ªë l∆∞·ª£ng nh√¢n vi√™n t√¨m th·∫•y:', staffMembers.length);
          
          // N·∫øu kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o, c√≥ th·ªÉ do c·∫•u tr√∫c d·ªØ li·ªáu kh√°c
          if (staffMembers.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n, th·ª≠ t√¨m l·∫°i v·ªõi c·∫•u tr√∫c kh√°c');
            
            // Ki·ªÉm tra t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ t√¨m nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ l√† nh√¢n vi√™n
            staffMembers = data.filter(member => {
              // Duy·ªát qua t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa member ƒë·ªÉ t√¨m role
              if (typeof member === 'object' && member !== null) {
                const roleProps = Object.keys(member).find(key => 
                  key.toLowerCase().includes('role') || 
                  key.toLowerCase().includes('vai tr√≤')
                );
                
                if (roleProps && typeof member[roleProps] === 'string') {
                  return member[roleProps].toLowerCase().includes('staff');
                }
              }
              return false;
            });
          }
          
          setStaff(staffMembers);
        } else {
          console.error('D·ªØ li·ªáu kh√¥ng ph·∫£i l√† m·∫£ng ho·∫∑c m·∫£ng r·ªóng:', data);
          setError('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i sau.');
          setStaff([]);
        }
      } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:', error);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setStaff([]);
      } finally {
        setLoading(false);
      }
    };

    fetchStaff();
  }, []);

  const handleEdit = (member) => {
    setCurrentStaff(member);
    setEditMode(true);
    setOpenDialog(true);
  };

  const handleUpdateStaff = async () => {
    try {
      const response = await adminService.updateStaff(currentStaff.userId, {
        name: currentStaff.name,
        fullName: currentStaff.fullName,
        email: currentStaff.email,
        phone: currentStaff.phone,
        address: currentStaff.address,
        role: currentStaff.role,
      });
      const updatedMember = response.data;

      setStaff((prevStaff) =>
        prevStaff.map((member) =>
          member.userId === updatedMember.userId ? updatedMember : member
        )
      );

      alert('ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n');
      setOpenDialog(false);
      setCurrentStaff(null);
    } catch (error) {
      alert('ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.');
      console.error('Error updating staff:', error);
    }
  };

  const handleDelete = (userId) => {
    // Logic ƒë·ªÉ x√≥a nh√¢n vi√™n
    console.log('X√≥a nh√¢n vi√™n v·ªõi ID:', userId);
  };

  // H√†m ƒë·ªÉ l·ªçc nh√¢n vi√™n d·ª±a tr√™n gi√° tr·ªã t√¨m ki·∫øm
  const filteredStaff = staff.filter(member => {
    const fullName = (member?.fullName || '').toLowerCase();
    const email = (member?.email || '').toLowerCase();
    const password = (member?.password || '').toLowerCase();
    const phone = (member?.phone || '').toLowerCase();
    const address = (member?.address || '').toLowerCase();
    const searchTermLower = searchTerm.toLowerCase();

    return (
      fullName.includes(searchTermLower) ||
      email.includes(searchTermLower) ||
      password.includes(searchTermLower) ||
      phone.includes(searchTermLower) ||
      address.includes(searchTermLower)
    );
  });

  const handleAddStaff = async () => {
    if (!newStaff.username || !newStaff.email || !newStaff.password) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.');
      return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(newStaff.email)) {
      alert('Email kh√¥ng h·ª£p l·ªá.');
      return;
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    if (!passwordRegex.test(newStaff.password)) {
      alert('M·∫≠t kh·∫©u ph·∫£i ch·ª©a ch·ªØ, s·ªë v√† √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát, t·ªëi thi·ªÉu 8 k√Ω t·ª±.');
      return;
    }

    try {
      setLoading(true);
      
      const staffData = {
        username: newStaff.username,
        email: newStaff.email,
        password: newStaff.password
      };
      
      console.log('D·ªØ li·ªáu g·ª≠i ƒëi:', staffData);
      
      const response = await adminService.addStaff(staffData);
      console.log('Ph·∫£n h·ªìi t·ª´ server:', response);
      
      if (response) {
        // T·∫°o ƒë·ªãnh d·∫°ng m·∫≠t kh·∫©u hi·ªÉn th·ªã ƒë·ªìng nh·∫•t v·ªõi m·∫≠t kh·∫©u ƒë√£ c√≥
        // T·ª´ h√¨nh ·∫£nh, c√≥ v·∫ª nh∆∞ m·∫≠t kh·∫©u hi·ªÉn th·ªã d·∫°ng "t√™nUser1234@"
        const displayPassword = `${newStaff.username}1234@`;
        
        // Ho·∫∑c n·∫øu mu·ªën hi·ªÉn th·ªã ch√≠nh x√°c m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p (kh√¥ng khuy·∫øn ngh·ªã)
        // const displayPassword = newStaff.password;
        
        // Th√™m nh√¢n vi√™n m·ªõi v√†o state v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
        const newStaffMember = {
          ...response,
          userId: response.userId || Date.now(),
          name: response.name || response.username || newStaff.username,
          fullName: response.fullName || response.name || newStaff.username,
          email: response.email || newStaff.email,
          role: 'Staff',
          password: displayPassword // S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng m·∫≠t kh·∫©u th·ªëng nh·∫•t
        };
        
        console.log('Nh√¢n vi√™n m·ªõi ƒë∆∞·ª£c th√™m v√†o state:', newStaffMember);
        
        // C·∫≠p nh·∫≠t state v·ªõi nh√¢n vi√™n m·ªõi
        setStaff(prevStaff => [...prevStaff, newStaffMember]);
        
        alert('Th√™m nh√¢n vi√™n th√†nh c√¥ng!');
        setOpenDialog(false);
        setNewStaff({ username: '', email: '', password: '' });
      }
    } catch (error) {
      console.error('L·ªói khi th√™m nh√¢n vi√™n:', error);
      
      // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói c·ª• th·ªÉ
      if (error.response) {
        if (error.response.status === 409) {
          alert('T√™n ng∆∞·ªùi d√πng ho·∫∑c email ƒë√£ t·ªìn t·∫°i!');
        } else {
          alert('L·ªói: ' + (error.response.data?.message || 'Kh√¥ng th·ªÉ th√™m nh√¢n vi√™n'));
        }
      } else {
        alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box sx={{ bgcolor: "#f0f0f0", minHeight: "100vh", width:'99vw' }}>
      <div className="manager-container">
        {/* Sidebar */}
        <div className="sidebar">
          <div className="logo-container">
            <div className="logo" style={{ marginRight: '15px', cursor: 'pointer' }} onClick={() => navigate("/")}>
              <img 
                src="/images/logo.png" 
                alt="Beauty Cosmetics"
                style={{
                  width: 60, 
                  height: 60, 
                  borderRadius: '50%',
                  objectFit: 'cover'
                }}
              />
            </div>
            <div className="brand" style={{ cursor: 'pointer' }} onClick={() => navigate("/")}>
              <div>BEAUTY</div>
              <div>COSMETICS</div>
            </div>
          </div>
          
          <div className="sidebar-title">MANAGER</div>
          
          <div className="sidebar-menu">
            {sidebarItems.map((item) => (
              <div key={item.id} className={`sidebar-item ${activeItem === item.id ? 'active' : ''}`} onClick={() => { setActiveItem(item.id); navigate(`/${item.id}`); }} style={{ cursor: 'pointer' }}>
                <span className="sidebar-icon">{item.icon}</span>
                <span className="sidebar-text">{item.name}</span>
              </div>
            ))}
          </div>
          
          
        </div>

        {/* Main Content */}
        <div className="main-content">
          {/* Header */}
          <div className="dashboard-header">
            <div className="search-bar">
              <input 
                type="text" 
                placeholder="T√¨m ki·∫øm theo t√™n, email, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ..." 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)} // C·∫≠p nh·∫≠t gi√° tr·ªã t√¨m ki·∫øm
                style={{ color: 'black' }} // Thay ƒë·ªïi m√†u ch·ªØ th√†nh ƒëen
              />
            </div>
          </div>
          
          {/* Dashboard Title and Actions */}
          <div className="dashboard-title-bar">
            <h1>Nh√¢n Vi√™n</h1>
            <div className="dashboard-actions">
              <button 
                className="btn-create-payment" 
                onClick={() => { setEditMode(false); setOpenDialog(true); }}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#28a745', 
                  color: 'white',
                  border: 'none',
                  borderRadius: '5px',
                  cursor: 'pointer',
                  fontSize: '14px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '5px'
                }}
              >
                <FaPlus /> Th√™m nh√¢n vi√™n
              </button>
            </div>
          </div>
          
          {/* Table */}
          <div className="dashboard-table">
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>T√äN</th>
                  <th>H·ªå V√Ä T√äN</th>
                  <th>EMAIL</th>
                  <th>M·∫¨T KH·∫®U</th>
                  <th>VAI TR√í</th>
                  <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                  <th>ƒê·ªäA CH·ªà</th>
                  <th>NG√ÄY ƒêƒÇNG K√ù</th>
                  <th>THAO T√ÅC</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td colSpan="9" className="empty-data-message">
                      ƒêang t·∫£i d·ªØ li·ªáu...
                    </td>
                  </tr>
                ) : error ? (
                  <tr>
                    <td colSpan="9" className="empty-data-message error-message">
                      {error}
                    </td>
                  </tr>
                ) : filteredStaff.length > 0 ? (
                  filteredStaff.map((member, index) => (
                    <tr key={member.userId || index}>
                      <td>{member.userId || '-'}</td>
                      <td>{member.name || '-'}</td>
                      <td>{member.fullName || member.name || '-'}</td>
                      <td>{member.email || '-'}</td>
                      <td>
                        {member.password ? 
                          (member.password === "string" || member.password.length < 6) ? 
                            "******" : member.password 
                          : "-"}
                      </td>
                      <td>{member.role || '-'}</td>
                      <td>{member.phone || '-'}</td>
                      <td>{member.address || '-'}</td>
                      <td>{member.registrationDate || '-'}</td>
                      <td>
                        <div style={{ display: 'flex', justifyContent: 'center', gap: '8px' }}>
                          <button
                            onClick={() => handleEdit(member)}
                            style={{
                              padding: '5px 10px',
                              backgroundColor: '#007bff',
                              color: 'white',
                              border: 'none',
                              borderRadius: '3px',
                              cursor: 'pointer',
                              minWidth: '60px'
                            }}
                          >
                            S·ª≠a
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="9" className="empty-data-message">
                      Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>{editMode ? 'S·ª≠a Th√¥ng Tin Nh√¢n Vi√™n' : 'Th√™m Nh√¢n Vi√™n M·ªõi'}</DialogTitle>
        <DialogContent>
          {editMode ? (
            // Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a - gi·ªØ nguy√™n c√°c tr∆∞·ªùng hi·ªán t·∫°i
            <>
              <TextField
                autoFocus
                margin="dense"
                label="T√™n"
                type="text"
                fullWidth
                value={currentStaff?.name || ''}
                onChange={(e) => setCurrentStaff({ ...currentStaff, name: e.target.value })}
              />
              <TextField
                margin="dense"
                label="Email"
                type="email"
                fullWidth
                value={currentStaff?.email || ''}
                onChange={(e) => setCurrentStaff({ ...currentStaff, email: e.target.value })}
              />
              <TextField
                margin="dense"
                label="S·ªë ƒëi·ªán tho·∫°i"
                type="text"
                fullWidth
                value={currentStaff?.phone || ''}
                onChange={(e) => setCurrentStaff({ ...currentStaff, phone: e.target.value })}
              />
              <TextField
                margin="dense"
                label="ƒê·ªãa ch·ªâ"
                type="text"
                fullWidth
                value={currentStaff?.address || ''}
                onChange={(e) => setCurrentStaff({ ...currentStaff, address: e.target.value })}
              />
              <Select
                fullWidth
                value={currentStaff?.role || 'Staff'}
                onChange={(e) => setCurrentStaff({ ...currentStaff, role: e.target.value })}
              >
                <MenuItem value="Staff">Staff</MenuItem>
                <MenuItem value="Customer">Customer</MenuItem>
              </Select>
            </>
          ) : (
            // Ch·∫ø ƒë·ªô th√™m m·ªõi - ch·ªâ hi·ªÉn th·ªã 3 tr∆∞·ªùng c·∫ßn thi·∫øt
            <>
              <TextField
                autoFocus
                margin="dense"
                label="T√™n ng∆∞·ªùi d√πng"
                type="text"
                fullWidth
                value={newStaff.username}
                onChange={(e) => setNewStaff({ ...newStaff, username: e.target.value })}
                required
              />
              <TextField
                margin="dense"
                label="Email"
                type="email"
                fullWidth
                value={newStaff.email}
                onChange={(e) => setNewStaff({ ...newStaff, email: e.target.value })}
                required
              />
              <TextField
                margin="dense"
                label="M·∫≠t kh·∫©u"
                type={showPassword ? "text" : "password"}
                fullWidth
                value={newStaff.password}
                onChange={(e) => setNewStaff({ ...newStaff, password: e.target.value })}
                helperText="M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, bao g·ªìm ch·ªØ, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát"
                required
              />
              <FormControlLabel
                control={<Checkbox checked={showPassword} onChange={(e) => setShowPassword(e.target.checked)} />}
                label="Hi·ªán m·∫≠t kh·∫©u"
              />
            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)} color="primary">
            H·ªßy
          </Button>
          <Button 
            onClick={editMode ? handleUpdateStaff : handleAddStaff} 
            color="primary"
            disabled={loading || (
              !editMode && (!newStaff.username || !newStaff.email || !newStaff.password)
            )}
          >
            {loading ? 'ƒêang x·ª≠ l√Ω...' : (editMode ? 'C·∫≠p nh·∫≠t' : 'Th√™m')}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Staff;
