import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaPlus } from 'react-icons/fa';
import { Box, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Button, FormControlLabel, Checkbox, Select, MenuItem } from '@mui/material';
import userService from '../../apis/userService'; // Import userService
import adminService from '../../apis/adminService'; // Import adminService
import './Manager.css';

const Staff = () => {
  const [activeItem, setActiveItem] = useState('');
  const [staff, setStaff] = useState([]); 
  const [loading, setLoading] = useState(true); 
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState(''); // State ƒë·ªÉ l∆∞u tr·ªØ gi√° tr·ªã t√¨m ki·∫øm
  const navigate = useNavigate();
  const [openDialog, setOpenDialog] = useState(false);
  const [newStaff, setNewStaff] = useState({ 
    username: '', 
    email: '', 
    password: '' 
  });
  const [showPassword, setShowPassword] = useState(false);
  const [formErrors, setFormErrors] = useState({
    username: '',
    email: '',
    password: ''
  });
  const [openRoleDialog, setOpenRoleDialog] = useState(false);
  const [selectedRole, setSelectedRole] = useState('');
  const [staffToChangeRole, setStaffToChangeRole] = useState(null);
  const [currentUserRole, setCurrentUserRole] = useState('');

  const sidebarItems = [
    { id: 'revenue', name: 'Doanh thu', icon: 'üìä' },
    { id: 'staff', name: 'Nh√¢n vi√™n', icon: 'üë§' },
    { id: 'viewOrder', name: 'ƒê∆°n h√†ng', icon: 'üìã' },
    { id: 'product', name: 'S·∫£n ph·∫©m', icon: 'üì¶' },
    { id: 'viewCustomer', name: 'H·ªì s∆° kh√°ch h√†ng', icon: 'üìù' },
    { id: 'viewSupport', name: 'ƒê∆°n h·ªó tr·ª£', icon: 'üì´' },
    { id: 'voucher', name: 'Vouchers', icon: 'üé´' },
    { id: 'feedback', name: 'ƒê√°nh gi√° s·∫£n ph·∫©m', icon: 'üì¢' },
    { id: 'blogManager', name: 'Blog', icon: 'üì∞' }
  ];

  // Kh·ªüi t·∫°o gi√° tr·ªã currentUserRole t·ª´ localStorage khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    try {
      // S·ª≠a role n·∫øu c·∫ßn
      const fixedRole = userService.fixUserRole();
      console.log('Vai tr√≤ ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a:', fixedRole);
      
      // Sau ƒë√≥ ƒë·ªçc l·∫°i t·ª´ localStorage
      const userStr = localStorage.getItem('user');
      if (userStr) {
        const user = JSON.parse(userStr);
        setCurrentUserRole(user.role || '');
      }
    } catch (error) {
      console.error('L·ªói khi ƒë·ªçc vai tr√≤ ng∆∞·ªùi d√πng t·ª´ localStorage:', error);
    }
  }, []);

  useEffect(() => {
    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p khi trang ƒë∆∞·ª£c t·∫£i
    const checkAccess = () => {
      try {
        // S·ª≠a role n·∫øu c·∫ßn
        userService.fixUserRole();
        
        const userStr = localStorage.getItem('user');
        if (!userStr) {
          alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y');
          navigate('/login');
          return false;
        }
        
        const user = JSON.parse(userStr);
        console.log('Ki·ªÉm tra vai tr√≤ ƒë·ªÉ truy c·∫≠p:', user.role);
        
        if (user.role !== 'Manager' && user.role !== 'Admin') {
          alert('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y. Ch·ªâ Manager ho·∫∑c Admin m·ªõi ƒë∆∞·ª£c ph√©p v√†o.');
          navigate('/');
          return false;
        }
        
        // L∆∞u vai tr√≤ ng∆∞·ªùi d√πng hi·ªán t·∫°i
        setCurrentUserRole(user.role);
        
        return true;
      } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra quy·ªÅn truy c·∫≠p:', error);
        alert('C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra quy·ªÅn truy c·∫≠p');
        navigate('/');
        return false;
      }
    };
    
    // N·∫øu kh√¥ng c√≥ quy·ªÅn truy c·∫≠p, kh√¥ng c·∫ßn fetch d·ªØ li·ªáu
    if (!checkAccess()) return;
    
    const fetchStaff = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng
        const data = await userService.getAllUsers();
        console.log('Data returned from getAllUsers:', data);
        
        // Log chi ti·∫øt t·ª´ng ng∆∞·ªùi d√πng v√† role c·ªßa h·ªç
        console.log('Chi ti·∫øt ng∆∞·ªùi d√πng v√† role:');
        data.forEach((user, index) => {
          console.log(`User ${index + 1}:`, {
            userId: user.userId,
            name: user.name,
            role: user.role,
            roleLowerCase: user.role?.toLowerCase()
          });
        });
        
        if (Array.isArray(data) && data.length > 0) {
          // L·ªçc danh s√°ch ƒë·ªÉ ch·ªâ l·∫•y nh·ªØng ng∆∞·ªùi c√≥ vai tr√≤ l√† "Staff" ho·∫∑c "Manager"
          let staffMembers = data.filter(member => {
            // Ki·ªÉm tra vai tr√≤ c·ªßa th√†nh vi√™n, s·ª≠ d·ª•ng includes() ƒë·ªÉ b·∫Øt c·∫£ c√°c bi·∫øn th·ªÉ
            const memberRole = (member?.role || '').toLowerCase();
            return memberRole.includes('staff') || memberRole.includes('manager');
          });
          
          console.log('L·ªçc ng∆∞·ªùi d√πng c√≥ role l√† Staff ho·∫∑c Manager');
          
          console.log('S·ªë l∆∞·ª£ng nh√¢n vi√™n t√¨m th·∫•y:', staffMembers.length);
          
          // Log chi ti·∫øt danh s√°ch nh√¢n vi√™n sau khi l·ªçc
          console.log('Danh s√°ch nh√¢n vi√™n sau khi l·ªçc:');
          staffMembers.forEach((member, index) => {
            console.log(`Staff member ${index + 1}:`, {
              userId: member.userId,
              name: member.name,
              role: member.role,
              roleLowerCase: member.role?.toLowerCase()
            });
          });
          
          // N·∫øu kh√¥ng t√¨m th·∫•y nh√¢n vi√™n n√†o, c√≥ th·ªÉ do c·∫•u tr√∫c d·ªØ li·ªáu kh√°c
          if (staffMembers.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n, th·ª≠ t√¨m l·∫°i v·ªõi c·∫•u tr√∫c kh√°c');
            
            // Ki·ªÉm tra t·∫•t c·∫£ d·ªØ li·ªáu ƒë·ªÉ t√¨m nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ l√† nh√¢n vi√™n
            staffMembers = data.filter(member => {
              // Duy·ªát qua t·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa member ƒë·ªÉ t√¨m role
              if (typeof member === 'object' && member !== null) {
                const roleProps = Object.keys(member).find(key => 
                  key.toLowerCase().includes('role') || 
                  key.toLowerCase().includes('vai tr√≤')
                );
                
                if (roleProps && typeof member[roleProps] === 'string') {
                  const roleLower = member[roleProps].toLowerCase();
                  return roleLower.includes('staff') || roleLower.includes('manager');
                }
              }
              return false;
            });
          }
          
          // S·∫Øp x·∫øp danh s√°ch nh√¢n vi√™n theo ID ƒë·ªÉ d·ªÖ d√†ng theo d√µi
          staffMembers = staffMembers.sort((a, b) => 
            (a.userId || 0) - (b.userId || 0)
          );
          
          setStaff(staffMembers);
        } else {
          console.error('D·ªØ li·ªáu kh√¥ng ph·∫£i l√† m·∫£ng ho·∫∑c m·∫£ng r·ªóng:', data);
          setError('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i sau.');
          setStaff([]);
        }
      } catch (error) {
        console.error('L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:', error);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i sau.');
        setStaff([]);
      } finally {
        setLoading(false);
      }
    };

    fetchStaff();
  }, []);

  const handleOpenRoleDialog = (member) => {
    setStaffToChangeRole(member);
    setSelectedRole(member.role || 'Staff');
    setOpenRoleDialog(true);
  };

  const handleRoleUpdate = async () => {
    try {
      // S·ª≠a role tr∆∞·ªõc khi ki·ªÉm tra quy·ªÅn
      userService.fixUserRole();
      
      // Ki·ªÉm tra quy·ªÅn t·ª´ localStorage
      const userStr = localStorage.getItem('user');
      if (!userStr) {
        alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y');
        return;
      }

      const user = JSON.parse(userStr);
      
      // Th√™m log ƒë·ªÉ xem th√¥ng tin ng∆∞·ªùi d√πng v√† vai tr√≤
      console.log('Th√¥ng tin ng∆∞·ªùi d√πng khi ƒë·ªïi vai tr√≤:', {
        userId: user.userId,
        username: user.username,
        role: user.role,
        roleType: typeof user.role,
        roleUpperCase: user.role?.toUpperCase(),
        isManager: user.role === 'Manager',
        isManagerIgnoreCase: user.role?.toUpperCase() === 'MANAGER',
        staffToChangeUserId: staffToChangeRole?.userId,
        selectedRole: selectedRole
      });

      // Ki·ªÉm tra vai tr√≤ m·ªôt c√°ch ch√≠nh x√°c
      if (user.role !== 'Manager' && user.role !== 'Admin') {
        alert('B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi vai tr√≤ ng∆∞·ªùi d√πng. Ch·ªâ Manager ho·∫∑c Admin m·ªõi ƒë∆∞·ª£c ph√©p thao t√°c n√†y.');
        return;
      }

      // Kh√¥ng cho ph√©p thay ƒë·ªïi vai tr√≤ c·ªßa ch√≠nh m√¨nh
      if (staffToChangeRole.userId === user.userId) {
        alert('B·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi vai tr√≤ c·ªßa ch√≠nh m√¨nh');
        return;
      }

      // Ki·ªÉm tra vai tr√≤ h·ª£p l·ªá (ch·ªâ cho ph√©p Staff v√† Customer)
      const validRoles = ['Staff', 'Customer'];
      if (!validRoles.includes(selectedRole)) {
        alert('Vai tr√≤ kh√¥ng h·ª£p l·ªá. Ch·ªâ ƒë∆∞·ª£c ch·ªçn Staff ho·∫∑c Customer.');
        return;
      }

      // T√°i x√°c nh·∫≠n vai tr√≤ ng∆∞·ªùi d√πng
      if (currentUserRole !== 'Manager' && currentUserRole !== 'Admin') {
        alert('Ch·ªâ Manager ho·∫∑c Admin m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi vai tr√≤ c·ªßa ng∆∞·ªùi d√πng.');
        setOpenRoleDialog(false);
        return;
      }

      // L∆∞u vai tr√≤ hi·ªán t·∫°i tr∆∞·ªõc khi thay ƒë·ªïi ƒë·ªÉ so s√°nh sau
      const currentRoleOfUser = staffToChangeRole.role;

      setLoading(true);
      
      // G·ªçi API m·ªõi ƒë√£ th√™m - th√™m log cho request
      console.log('G·ª≠i request ƒë·ªïi vai tr√≤:', {
        userId: staffToChangeRole.userId,
        newRole: selectedRole,
        currentUserRole: user.role, // Th√™m vai tr√≤ ng∆∞·ªùi d√πng hi·ªán t·∫°i v√†o log
        currentRoleOfUser: currentRoleOfUser // Th√™m vai tr√≤ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c ƒë·ªïi
      });
      
      // ƒê·∫∑t l·∫°i gi√° tr·ªã trong localStorage ƒë·ªÉ ƒë·∫£m b·∫£o th√¥ng tin ƒë√∫ng
      localStorage.setItem('user_role', user.role);
      
      try {
        // S·ª≠ d·ª•ng adminService.updateUserRole ƒë·ªÉ g·ªçi API v·ªõi headers b·ªï sung
        const response = await adminService.updateUserRole(staffToChangeRole.userId, selectedRole);
        
        // Th√™m log cho response
        console.log('Ph·∫£n h·ªìi t·ª´ API:', response);
        
        // C·∫≠p nh·∫≠t state d·ª±a tr√™n vai tr√≤ m·ªõi
        if (selectedRole === 'Customer' && currentRoleOfUser === 'Staff') {
          // N·∫øu chuy·ªÉn t·ª´ Staff sang Customer, lo·∫°i b·ªè ng∆∞·ªùi d√πng kh·ªèi danh s√°ch
          setStaff(prevStaff => 
            prevStaff.filter(member => member.userId !== staffToChangeRole.userId)
          );
          alert(`ƒê√£ thay ƒë·ªïi vai tr√≤ c·ªßa "${staffToChangeRole.name}" th√†nh "${selectedRole}". Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c lo·∫°i kh·ªèi danh s√°ch nh√¢n vi√™n.`);
        } else if (selectedRole === 'Staff') {
          // N·∫øu chuy·ªÉn sang vai tr√≤ Staff, c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng trong danh s√°ch
          setStaff(prevStaff => 
            prevStaff.map(member => 
              member.userId === staffToChangeRole.userId 
                ? { ...member, role: selectedRole } 
                : member
            )
          );
          alert(`ƒê√£ thay ƒë·ªïi vai tr√≤ c·ªßa "${staffToChangeRole.name}" th√†nh "${selectedRole}"`);
        }
        
        setOpenRoleDialog(false);
        setStaffToChangeRole(null);
      } catch (apiError) {
        console.error('API Error:', apiError);
        
        if (apiError.response) {
          const statusCode = apiError.response.status;
          const errorData = apiError.response.data;
          let errorMessage = 'Kh√¥ng x√°c ƒë·ªãnh';
          
          // X·ª≠ l√Ω th√¥ng b√°o l·ªói
          if (typeof errorData === 'string') {
            errorMessage = errorData;
          } else if (errorData && errorData.message) {
            errorMessage = errorData.message;
          } else if (errorData && typeof errorData === 'object') {
            errorMessage = JSON.stringify(errorData);
          }
          
          // X·ª≠ l√Ω ri√™ng cho l·ªói 500
          if (statusCode === 500) {
            console.error('L·ªói 500:', errorData);
            
            // Ki·ªÉm tra n·∫øu c√≥ ch·ª©a "inner exception"
            if (errorMessage.includes('inner exception')) {
              alert(`C√≥ l·ªói x·∫£y ra v·ªõi c∆° s·ªü d·ªØ li·ªáu. Vai tr√≤ "${selectedRole}" c√≥ th·ªÉ kh√¥ng h·ª£p l·ªá trong h·ªá th·ªëng.`);
            } else {
              alert(`L·ªói m√°y ch·ªß (500): ${errorMessage}`);
            }
          } else if (statusCode === 401) {
            alert(`L·ªói x√°c th·ª±c: ${errorMessage}`);
            console.error('Headers g·ª≠i ƒëi:', apiError.config?.headers);
          } else {
            alert(`L·ªói (${statusCode}): ${errorMessage}`);
          }
        } else if (apiError.request) {
          alert('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.');
        } else {
          alert(`L·ªói: ${apiError.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß'}`);
        }
      }
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t vai tr√≤:', error);
      
      let errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t vai tr√≤.';
      
      if (error.response) {
        if (error.response.status === 401) {
          errorMessage = 'B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi vai tr√≤ ng∆∞·ªùi d√πng';
        } else if (error.response.status === 404) {
          errorMessage = 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng';
        } else if (error.response.status === 500) {
          errorMessage = `L·ªói m√°y ch·ªß: ${error.response.data || 'C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªõi vai tr√≤ ƒë∆∞·ª£c ch·ªçn'}`;
        } else {
          errorMessage = `L·ªói (${error.response.status}): ${error.response.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i sau'}`;
        }
      } else if (error.request) {
        errorMessage = 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
      } else {
        errorMessage = `L·ªói: ${error.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß'}`;
      }
      
      alert(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (userId) => {
    // Logic ƒë·ªÉ x√≥a nh√¢n vi√™n
    console.log('X√≥a nh√¢n vi√™n v·ªõi ID:', userId);
  };

  // H√†m ƒë·ªÉ l·ªçc nh√¢n vi√™n d·ª±a tr√™n gi√° tr·ªã t√¨m ki·∫øm
  const filteredStaff = staff.filter(member => {
    const fullName = (member?.fullName || '').toLowerCase();
    const email = (member?.email || '').toLowerCase();
    const password = (member?.password || '').toLowerCase();
    const phone = (member?.phone || '').toLowerCase();
    const address = (member?.address || '').toLowerCase();
    const role = (member?.role || '').toLowerCase();
    const searchTermLower = searchTerm.toLowerCase();

    return (
      fullName.includes(searchTermLower) ||
      email.includes(searchTermLower) ||
      password.includes(searchTermLower) ||
      phone.includes(searchTermLower) ||
      address.includes(searchTermLower) ||
      role.includes(searchTermLower)
    );
  });

  // H√†m ki·ªÉm tra ƒë·ªãnh d·∫°ng email
  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email) {
      return 'Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    } else if (!emailRegex.test(email)) {
      return 'Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng (v√≠ d·ª•: example@domain.com)';
    }
    return '';
  };

  // H√†m ki·ªÉm tra tr·ª±c ti·∫øp v√† c·∫≠p nh·∫≠t l·ªói email khi ng∆∞·ªùi d√πng nh·∫≠p
  const handleEmailChange = (e) => {
    const emailValue = e.target.value;
    setNewStaff({ ...newStaff, email: emailValue });
    
    // Ch·ªâ ki·ªÉm tra khi ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p g√¨ ƒë√≥ v√† di chuy·ªÉn ra kh·ªèi tr∆∞·ªùng
    if (e.type === 'blur') {
      setFormErrors({
        ...formErrors,
        email: validateEmail(emailValue)
      });
    }
  };

  // C·∫≠p nh·∫≠t h√†m handleAddStaff
  const handleAddStaff = async () => {
    // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ localStorage
    const userStr = localStorage.getItem('user');
    if (!userStr) {
      alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y');
      return;
    }

    const user = JSON.parse(userStr);
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† Manager kh√¥ng
    if (user.role !== 'Manager' && user.role !== 'Admin') {
      alert('B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m nh√¢n vi√™n m·ªõi. Ch·ªâ Manager m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y.');
      return;
    }

    // Ki·ªÉm tra t·∫•t c·∫£ c√°c tr∆∞·ªùng v√† c·∫≠p nh·∫≠t l·ªói
    const errors = {
      username: !newStaff.username ? 'T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' : '',
      email: validateEmail(newStaff.email),
      password: !newStaff.password 
        ? 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' 
        : !/^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])[A-Za-z\d!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]{8,}$/.test(newStaff.password) 
          ? 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a ch·ªØ, s·ªë v√† √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát, t·ªëi thi·ªÉu 8 k√Ω t·ª±' 
          : ''
    };

    // C·∫≠p nh·∫≠t state l·ªói
    setFormErrors(errors);

    // Ki·ªÉm tra xem c√≥ l·ªói n√†o kh√¥ng
    if (errors.username || errors.email || errors.password) {
      return; // D·ª´ng l·∫°i n·∫øu c√≥ l·ªói
    }

    try {
      setLoading(true);
      
      const staffData = {
        username: newStaff.username,
        email: newStaff.email,
        password: newStaff.password
      };
      
      console.log('D·ªØ li·ªáu g·ª≠i ƒëi:', staffData);
      
      const response = await adminService.addStaff(staffData);
      console.log('Ph·∫£n h·ªìi t·ª´ server:', response);
      
      if (response) {
        // S·ª≠ d·ª•ng m·∫≠t kh·∫©u th·ª±c t·∫ø m√† ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
        const displayPassword = newStaff.password;
        
        // Th√™m nh√¢n vi√™n m·ªõi v√†o state v·ªõi m·∫≠t kh·∫©u th·ª±c t·∫ø
        const newStaffMember = {
          ...response,
          userId: response.userId || Date.now(),
          name: response.name || response.username || newStaff.username,
          fullName: response.fullName || response.name || newStaff.username,
          email: response.email || newStaff.email,
          role: 'Staff',
          password: displayPassword // S·ª≠ d·ª•ng m·∫≠t kh·∫©u th·ª±c t·∫ø ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
        };
        
        console.log('Nh√¢n vi√™n m·ªõi ƒë∆∞·ª£c th√™m v√†o state:', newStaffMember);
        
        // C·∫≠p nh·∫≠t state v·ªõi nh√¢n vi√™n m·ªõi
        setStaff(prevStaff => [...prevStaff, newStaffMember]);
        
        alert('Th√™m nh√¢n vi√™n th√†nh c√¥ng!');
        setOpenDialog(false);
        setNewStaff({ username: '', email: '', password: '' });
        setFormErrors({ username: '', email: '', password: '' }); // Reset l·ªói
      }
    } catch (error) {
      console.error('L·ªói khi th√™m nh√¢n vi√™n:', error);
      
      // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói c·ª• th·ªÉ
      if (error.response) {
        if (error.response.status === 409) {
          // Ki·ªÉm tra l·ªói tr√πng email ho·∫∑c username
          const errorMessage = error.response.data?.message || '';
          if (errorMessage.toLowerCase().includes('email')) {
            setFormErrors({
              ...formErrors,
              email: 'Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!'
            });
          } else {
            setFormErrors({
              ...formErrors,
              username: 'T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!'
            });
          }
        } else if (error.response.status === 401) {
          alert('B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m nh√¢n vi√™n m·ªõi');
        } else {
          alert('L·ªói: ' + (error.response.data?.message || 'Kh√¥ng th·ªÉ th√™m nh√¢n vi√™n'));
        }
      } else {
        alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } finally {
      setLoading(false);
    }
  };

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ th·ªÉ thay ƒë·ªïi vai tr√≤ kh√¥ng
  const canChangeRole = () => {
    return currentUserRole === 'Manager' || currentUserRole === 'Admin';
  };

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ th·ªÉ th√™m nh√¢n vi√™n kh√¥ng
  const canAddStaff = () => {
    return currentUserRole === 'Manager' || currentUserRole === 'Admin';
  };

  // Th√™m h√†m ƒë·ªÉ ƒë·ªãnh d·∫°ng ng√†y
  const formatDate = (dateString) => {
    if (!dateString || dateString === '-') return '-';
    
    try {
      // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√°ng th√†nh ƒë·ªëi t∆∞·ª£ng Date
      const date = new Date(dateString);
      // ƒê·ªãnh d·∫°ng ng√†y theo ki·ªÉu Vi·ªát Nam
      return date.toLocaleDateString('vi-VN');
    } catch (error) {
      console.error('L·ªói khi ƒë·ªãnh d·∫°ng ng√†y:', error);
      // N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng c·∫Øt chu·ªói
      if (dateString.includes('T')) {
        return dateString.split('T')[0];
      }
      return dateString;
    }
  };

  return (
    <Box sx={{ bgcolor: "#f0f0f0", minHeight: "100vh", width:'99vw' }}>
      <div className="manager-container">
        {/* Sidebar */}
        <div className="sidebar">
          <div className="logo-container">
            <div className="logo" style={{ marginRight: '15px', cursor: 'pointer' }} onClick={() => navigate("/")}>
              <img 
                src="/images/logo.png" 
                alt="Beauty Cosmetics"
                style={{
                  width: 60, 
                  height: 60, 
                  borderRadius: '50%',
                  objectFit: 'cover'
                }}
              />
            </div>
            <div className="brand" style={{ cursor: 'pointer' }} onClick={() => navigate("/")}>
              <div>BEAUTY</div>
              <div>COSMETICS</div>
            </div>
          </div>
          
          <div className="sidebar-title">MANAGER</div>
          
          <div className="sidebar-menu">
            {sidebarItems.map((item) => (
              <div key={item.id} className={`sidebar-item ${activeItem === item.id ? 'active' : ''}`} onClick={() => { setActiveItem(item.id); navigate(`/${item.id}`); }} style={{ cursor: 'pointer' }}>
                <span className="sidebar-icon">{item.icon}</span>
                <span className="sidebar-text">{item.name}</span>
              </div>
            ))}
          </div>
          
          
        </div>

        {/* Main Content */}
        <div className="main-content">
          {/* Header */}
          <div className="dashboard-header">
            <div className="search-bar">
              <input 
                type="text" 
                placeholder="T√¨m ki·∫øm theo t√™n, email, s·ªë ƒëi·ªán tho·∫°i, ƒë·ªãa ch·ªâ..." 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)} // C·∫≠p nh·∫≠t gi√° tr·ªã t√¨m ki·∫øm
                style={{ color: 'black' }} // Thay ƒë·ªïi m√†u ch·ªØ th√†nh ƒëen
              />
            </div>
          </div>
          
          {/* Dashboard Title and Actions */}
          <div className="dashboard-title-bar">
            <h1>Nh√¢n Vi√™n</h1>
            <div className="dashboard-actions">
              {canAddStaff() && (
                <button 
                  className="btn-create-payment" 
                  onClick={() => { setOpenDialog(true); }}
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#28a745', 
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    cursor: 'pointer',
                    fontSize: '14px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '5px'
                  }}
                >
                  <FaPlus /> Th√™m nh√¢n vi√™n
                </button>
              )}
            </div>
          </div>
          
          {/* Table */}
          <div className="dashboard-table">
            <table>
              <thead>
                <tr>
                  <th>ID</th>
                  <th>T√äN</th>
                  <th>H·ªå V√Ä T√äN</th>
                  <th>EMAIL</th>
                  <th>VAI TR√í</th>
                  <th>S·ªê ƒêI·ªÜN THO·∫†I</th>
                  <th>ƒê·ªäA CH·ªà</th>
                  <th>NG√ÄY ƒêƒÇNG K√ù</th>
                  <th>THAO T√ÅC</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td colSpan="9" className="empty-data-message">
                      ƒêang t·∫£i d·ªØ li·ªáu...
                    </td>
                  </tr>
                ) : error ? (
                  <tr>
                    <td colSpan="9" className="empty-data-message error-message">
                      {error}
                    </td>
                  </tr>
                ) : filteredStaff.length > 0 ? (
                  filteredStaff.map((member, index) => (
                    <tr key={member.userId || index}>
                      <td>{member.userId || '-'}</td>
                      <td>{member.name || '-'}</td>
                      <td>{member.fullName || member.name || '-'}</td>
                      <td>{member.email || '-'}</td>
                      <td>{member.role || '-'}</td>
                      <td>{member.phone || '-'}</td>
                      <td>{member.address || '-'}</td>
                      <td>{formatDate(member.registrationDate) || '-'}</td>
                      <td>
                        <div style={{ display: 'flex', justifyContent: 'center', gap: '8px' }}>
                          {canChangeRole() ? (
                            <button
                              onClick={() => handleOpenRoleDialog(member)}
                              style={{
                                padding: '5px 10px',
                                backgroundColor: '#007bff',
                                color: 'white',
                                border: 'none',
                                borderRadius: '3px',
                                cursor: 'pointer',
                                minWidth: '100px'
                              }}
                            >
                              ƒê·ªïi vai tr√≤
                            </button>
                          ) : (
                            <span style={{ 
                              fontSize: '12px', 
                              color: '#888', 
                              fontStyle: 'italic' 
                            }}>
                              C·∫ßn quy·ªÅn Manager
                            </span>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="9" className="empty-data-message">
                      Kh√¥ng c√≥ d·ªØ li·ªáu nh√¢n vi√™n
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>Th√™m Nh√¢n Vi√™n M·ªõi</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="T√™n ng∆∞·ªùi d√πng"
            type="text"
            fullWidth
            value={newStaff.username}
            onChange={(e) => {
              setNewStaff({ ...newStaff, username: e.target.value });
              if (formErrors.username) setFormErrors({...formErrors, username: ''});
            }}
            onBlur={(e) => {
              if (!e.target.value) {
                setFormErrors({...formErrors, username: 'T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'});
              }
            }}
            error={!!formErrors.username}
            helperText={formErrors.username}
            required
          />
          <TextField
            margin="dense"
            label="Email"
            type="email"
            fullWidth
            value={newStaff.email}
            onChange={(e) => {
              setNewStaff({ ...newStaff, email: e.target.value });
              // X√≥a th√¥ng b√°o l·ªói khi ng∆∞·ªùi d√πng ƒëang nh·∫≠p
              if (formErrors.email) setFormErrors({...formErrors, email: ''});
            }}
            onBlur={(e) => {
              setFormErrors({...formErrors, email: validateEmail(e.target.value)});
            }}
            error={!!formErrors.email}
            helperText={formErrors.email}
            required
          />
          <TextField
            margin="dense"
            label="M·∫≠t kh·∫©u"
            type={showPassword ? "text" : "password"}
            fullWidth
            value={newStaff.password}
            onChange={(e) => {
              setNewStaff({ ...newStaff, password: e.target.value });
              if (formErrors.password) setFormErrors({...formErrors, password: ''});
            }}
            onBlur={(e) => {
              const value = e.target.value;
              if (!value) {
                setFormErrors({...formErrors, password: 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'});
              } else if (!/^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])[A-Za-z\d!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]{8,}$/.test(value)) {
                setFormErrors({...formErrors, password: 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a ch·ªØ, s·ªë v√† √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát, t·ªëi thi·ªÉu 8 k√Ω t·ª±'});
              }
            }}
            error={!!formErrors.password}
            helperText={formErrors.password || "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, bao g·ªìm ch·ªØ, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát"}
            required
          />
          <FormControlLabel
            control={<Checkbox checked={showPassword} onChange={(e) => setShowPassword(e.target.checked)} />}
            label="Hi·ªán m·∫≠t kh·∫©u"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => {
            setOpenDialog(false);
            setFormErrors({ username: '', email: '', password: '' }); // Reset l·ªói khi ƒë√≥ng dialog
          }} color="primary">
            H·ªßy
          </Button>
          <Button 
            onClick={handleAddStaff} 
            color="primary"
            disabled={loading || (!newStaff.username || !newStaff.email || !newStaff.password)}
          >
            {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Th√™m'}
          </Button>
        </DialogActions>
      </Dialog>

      <Dialog open={openRoleDialog} onClose={() => setOpenRoleDialog(false)}>
        <DialogTitle>Thay ƒë·ªïi vai tr√≤ ng∆∞·ªùi d√πng</DialogTitle>
        <DialogContent>
          {staffToChangeRole && (
            <>
              <p>Ng∆∞·ªùi d√πng: <strong>{staffToChangeRole.name}</strong></p>
              <p>Email: {staffToChangeRole.email}</p>
              <p>Vai tr√≤ hi·ªán t·∫°i: <strong>{staffToChangeRole.role || 'Staff'}</strong></p>
              
              <Select
                fullWidth
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                style={{ marginTop: '20px' }}
              >
                <MenuItem value="Staff">Staff</MenuItem>
                <MenuItem value="Customer">Customer</MenuItem>
              </Select>
            </>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenRoleDialog(false)} color="primary">
            H·ªßy
          </Button>
          <Button 
            onClick={handleRoleUpdate} 
            color="primary"
            disabled={loading || !staffToChangeRole}
          >
            {loading ? 'ƒêang x·ª≠ l√Ω...' : 'C·∫≠p nh·∫≠t vai tr√≤'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Staff;
