import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { Box, Grid, Typography, Button, CircularProgress } from '@mui/material';
import Header from '../../components/Header';
import Footer from '../../components/Footer/Footer';
import './CareDetail.css';
import orderService from '../../apis/orderService';
import skincareService from '../../apis/skincareService';

const CareDetail = () => {
    // L·∫•y tham s·ªë skinType t·ª´ URL v√† chuy·ªÉn ƒë·ªïi th√†nh d·∫°ng ph√π h·ª£p
    const { skinType: skinTypeParam } = useParams();
    // Chuy·ªÉn ƒë·ªïi skinType t·ª´ URL (dadau) th√†nh d·∫°ng c√≥ d·∫•u (Da d·∫ßu) n·∫øu c·∫ßn
    const skinType = skinTypeParam; 
    const [products, setProducts] = useState([]);
    const [showRoutine, setShowRoutine] = useState(true);
    const [routineData, setRoutineData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [recommendedProducts, setRecommendedProducts] = useState([]);
    const navigate = useNavigate();

    const handleFindProducts = async () => {
        try {
            setLoading(true);
            console.log('T√¨m s·∫£n ph·∫©m cho lo·∫°i da:', skinType);
            console.log('D·ªØ li·ªáu routineData:', routineData);
            
            // Trong th·ª±c t·∫ø, s·∫Ω g·ªçi API ƒë·ªÉ l·∫•y s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t cho lo·∫°i da
            // V√≠ d·ª•: const response = await productService.getRecommendedProducts(skinType);
            
            // T·∫°m th·ªùi hi·ªÉn th·ªã s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t t·ª´ d·ªØ li·ªáu routineData n·∫øu c√≥
            if (routineData && routineData.recommendedProducts) {
                console.log('S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t:', routineData.recommendedProducts);
                setProducts(routineData.recommendedProducts);
            } else {
                // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t, hi·ªÉn th·ªã th√¥ng b√°o
                console.log('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t');
                setError('Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t cho lo·∫°i da n√†y');
                return;
            }
            
            setShowRoutine(false); // ·∫®n quy tr√¨nh ngay l·∫≠p t·ª©c
            sessionStorage.setItem('showProducts', 'true'); // L∆∞u tr·∫°ng th√°i hi·ªÉn th·ªã s·∫£n ph·∫©m
        } catch (err) {
            console.error('L·ªói khi t√¨m s·∫£n ph·∫©m:', err);
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i sau.');
        } finally {
            setLoading(false);
        }
    };

    const handleShowRoutine = () => {
        setShowRoutine(true); // Hi·ªÉn th·ªã l·∫°i quy tr√¨nh
        setProducts([]); // X√≥a danh s√°ch s·∫£n ph·∫©m
        sessionStorage.removeItem('showProducts'); // X√≥a tr·∫°ng th√°i
    };

    const handleProductClick = (productId) => {
        navigate(`/product/${productId}`); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
    };

    const handleBuyCombo = async () => {
        try {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ localStorage
            const productIds = products.map(product => product.id);
            
            // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m
            if (!productIds.length) {
                alert('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong combo!');
                return;
            }

            // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
            const token = localStorage.getItem('token');
            if (!token) {
                // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
                alert('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ mua s·∫£n ph·∫©m!');
                navigate('/login');
                return;
            }

            // T·∫°o ƒë∆°n h√†ng v·ªõi t·∫•t c·∫£ s·∫£n ph·∫©m trong combo
            const orderData = {
                products: productIds.map(id => ({
                    productId: id,
                    quantity: 1 // M·∫∑c ƒë·ªãnh m·ªói s·∫£n ph·∫©m s·ªë l∆∞·ª£ng l√† 1
                }))
            };

            // G·ªçi API ƒë·ªÉ t·∫°o ƒë∆°n h√†ng
            const response = await orderService.createOrder(orderData);

            // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ API
            if (response && response.orderId) {
                alert('ƒê√£ th√™m combo s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng!');
                navigate('/cart'); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang gi·ªè h√†ng
            } else {
                alert('C√≥ l·ªói x·∫£y ra khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.');
            }
        } catch (err) {
            console.error('L·ªói khi mua combo:', err);
            alert('Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    };

    const fetchRoutineData = async () => {
        try {
            setLoading(true);
            
            if (skinType) {
                console.log('ƒêang g·ªçi API v·ªõi skinType:', skinType);
                // L·∫•y d·ªØ li·ªáu quy tr√¨nh chƒÉm s√≥c da tr·ª±c ti·∫øp t·ª´ URL parameter
                const response = await skincareService.getRoutineBySkinType(skinType);
                console.log('Response t·ª´ API:', response);
                
                // Ki·ªÉm tra response v√† l∆∞u v√†o state
                if (response) {
                    setRoutineData(response);
                    setError(null);
                    
                    // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t n·∫øu c√≥
                    if (response.recommendedProducts) {
                        setRecommendedProducts(response.recommendedProducts);
                    }
                } else {
                    console.log('Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ');
                    throw new Error(`Kh√¥ng t√¨m th·∫•y quy tr√¨nh chƒÉm s√≥c cho lo·∫°i da: ${skinType}`);
                }
            } else {
                // N·∫øu kh√¥ng c√≥ lo·∫°i da, hi·ªÉn th·ªã l·ªói
                throw new Error('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i da');
            }
        } catch (err) {
            console.error('L·ªói khi l·∫•y d·ªØ li·ªáu quy tr√¨nh chƒÉm s√≥c da:', err);
            setError(err.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu quy tr√¨nh chƒÉm s√≥c da. Vui l√≤ng th·ª≠ l·∫°i sau.');
            setRoutineData(null); // ƒê·∫£m b·∫£o x√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥ l·ªói
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        // G·ªçi h√†m fetchRoutineData khi component mount ho·∫∑c khi skinType thay ƒë·ªïi
        fetchRoutineData();
        
        // Ki·ªÉm tra xem c√≥ n√™n hi·ªÉn th·ªã s·∫£n ph·∫©m hay kh√¥ng d·ª±a tr√™n sessionStorage
        const shouldShowProducts = sessionStorage.getItem('showProducts') === 'true';
        if (shouldShowProducts) {
            setShowRoutine(false);
        }

        // Cleanup function khi component unmount
        return () => {
            sessionStorage.removeItem('showProducts');
        };
    }, [skinType]); // Ch·ªâ g·ªçi l·∫°i khi skinType thay ƒë·ªïi ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n

    return (
        <>
            <Header />
            <Box sx={{ flexGrow: 1, py: 4, bgcolor: '#f5f5f5', width: "100vw", overflowX: "hidden" }}>
                <Box className="care-detail-container">
                    {/* Ph·∫ßn ·∫£nh ·ªü tr√™n */}
                    <Box className="image-container">
                        {loading ? (
                            <CircularProgress color="warning" />
                        ) : (
                            <img
                                src={routineData?.imageUrl || '/images/default-skincare.jpg'}
                                alt={`Quy tr√¨nh chƒÉm s√≥c da ${skinType}`}
                                className="care-banner-image"
                            />
                        )}
                    </Box>
                    
                    {/* Ph·∫ßn n·ªôi dung ·ªü d∆∞·ªõi */}
                    <Box className="content-container">
                        <Typography variant="h5" gutterBottom sx={{ color: '#ffbb02', fontWeight: 'bold', textAlign: 'center' }} className="highlight-yellow">
                            üåø {routineData?.title || 'Quy tr√¨nh chƒÉm s√≥c da'} üåø
                        </Typography>
                    
                        {loading ? (
                            <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
                                <CircularProgress color="warning" />
                            </Box>
                        ) : error ? (
                            <Typography color="error" sx={{ textAlign: 'center', my: 4 }}>
                                {error}
                            </Typography>
                        ) : showRoutine ? (
                            <Box className="routine-container">
                                {routineData ? (
                                    <div 
                                        dangerouslySetInnerHTML={{ 
                                            __html: routineData.content 
                                                ? routineData.content
                                                    .replace(/\n/g, '<br>')
                                                    .replace(/- /g, '‚Ä¢ ')
                                                    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                                                    .replace(/\*(.*?)\*/g, '<em>$1</em>')
                                                : '' 
                                        }} 
                                        className="routine-content" 
                                    />
                                ) : (
                                    <Typography color="error" sx={{ textAlign: 'center', my: 4 }}>
                                        Kh√¥ng t√¨m th·∫•y quy tr√¨nh chƒÉm s√≥c cho lo·∫°i da: {skinType}
                                    </Typography>
                                )}
                            </Box>
                        ) : (
                            <Box className="products-container">
                                <Typography variant="body1" paragraph sx={{ color: '#ffbb02', fontWeight: 'bold' }} className="list-black">
                                    {products.map((product) => (
                                        <div key={product.id} className="product-item" onClick={() => handleProductClick(product.id)}>
                                            <span className="product-title">{product.title}</span> <span className="product-name">{product.name}</span>
                                        </div>
                                    ))}
                                </Typography>
                            </Box>
                        )}
                        
                        <Box sx={{ display: 'flex', gap: 2, mt: 2, justifyContent: 'center' }}>
                            <Button 
                                variant="contained" 
                                sx={{ bgcolor: '#ffbb02', color: 'white' }}
                                onClick={showRoutine ? handleFindProducts : handleShowRoutine}
                            >
                                {showRoutine ? "T√¨m S·∫£n Ph·∫©m Ph√π H·ª£p" : "Xem Quy Tr√¨nh"}
                            </Button>

                            {!showRoutine && (
                                <Button 
                                    variant="contained" 
                                    sx={{ bgcolor: '#ff7b02', color: 'white' }}
                                    onClick={handleBuyCombo}
                                >
                                    Mua c·∫£ combo
                                </Button>
                            )}
                        </Box>
                    </Box>
                </Box>
            </Box>
            <Footer />
        </>
    );
};

export default CareDetail;
